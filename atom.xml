<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>From Noobs To Geeks</title>
  
  <subtitle>You Do (Not) Install LFS</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fromnoobstogeeks.com/"/>
  <updated>2019-07-01T05:10:34.258Z</updated>
  <id>https://fromnoobstogeeks.com/</id>
  
  <author>
    <name>khanhtc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Type embedding not inheritance</title>
    <link href="https://fromnoobstogeeks.com/2019/03/25/type_embedding/"/>
    <id>https://fromnoobstogeeks.com/2019/03/25/type_embedding/</id>
    <published>2019-03-25T23:00:13.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>Since we don’t have classes in go, you can say <code>struct</code> will do a job to make objects. So how 4 principles of object-oriented programming represent in golang? In this post, we will discuss about the principle of OOP that make golang more better than other object oriented programming language: <strong>inheritance</strong>.</p><a id="more"></a><p>A simple question, how does Golang represent inheritance principle even if it doesn't have <code>extends</code>? We can easily find out the answer of this question: <strong>embedding type</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Parent <span class="keyword">struct</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Child <span class="keyword">struct</span> &#123;</span><br><span class="line">    Parent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using the above code snippet, class Child can use all Parent's properties and methods directly, just like inheritance right? But with me, it's better than inheritance! Everyone who familiar with OOP thinking know about <strong>composition over inheritance</strong> principle, which we <code>design objects that are simplified by identifying system object behaviors in separate interfaces instead of creating a hierarchical relationship to distribute behaviors among business-domain classes via inheritance</code>.</p><p>The key of this design principle is that we implement <code>has-a</code> relationship in classes instead of <code>is-a</code> relationship. Embedding is a representation of <code>has-a</code> relationship, just embed what we want where we want it!</p><p>On the other hand, the interesting part is that we can embed as much as we want (not like inheritance, we can only extends one class due to the truth that we can only answer <code>is-a</code> question once).</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Men <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Men)</span> <span class="title">drink</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">"beer"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Women <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *Women)</span> <span class="title">drink</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">"wine"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Child <span class="keyword">struct</span> &#123;</span><br><span class="line">    Man</span><br><span class="line">    Women</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Child)</span> <span class="title">drink</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">"coke"</span> &#125;</span><br></pre></td></tr></table></figure><p>As above example, we can embed as much as we want! If the embedded classes lead us to the diamond problem, just implement that method to point out which implementation you want compiler use in that case.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Since we don’t have classes in go, you can say &lt;code&gt;struct&lt;/code&gt; will do a job to make objects. So how 4 principles of object-oriented programming represent in golang? In this post, we will discuss about the principle of OOP that make golang more better than other object oriented programming language: &lt;strong&gt;inheritance&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://fromnoobstogeeks.com/tags/golang/"/>
    
      <category term="oop" scheme="https://fromnoobstogeeks.com/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>Why can&#39;t initialize object from abstract class (java)</title>
    <link href="https://fromnoobstogeeks.com/2019/03/23/why_can_not_new_abstract_class/"/>
    <id>https://fromnoobstogeeks.com/2019/03/23/why_can_not_new_abstract_class/</id>
    <published>2019-03-23T01:50:54.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>Difference between Abstract class and Interface is one of the most be confused problem when the first time I learnt Java. In which case we should use Abstract class and which case we should use Interface? Let's take a deeper look in this two of concepts.</p><a id="more"></a><p>By defination, the Abstract class (java) is a <strong>class but unlike a simple java class, it's may not only contain regular defined methods but may also contain abstract methods or a mix of regular and abstract methods.</strong> Some of Abstract class's properties that make is different from Interface can be listed are:</p><ol type="1"><li><p>Methods of Interfaces cannot have implementations. In other words, they can have only abstract or non-concrete methods. Abstract classes can have both abstract methods and concrete methods. Interface cannot provide any code at all. Abstract class can provide complete code, default code, and/or stubs that have to be overwritten.</p></li><li><p>Interfaces can contain only final variables(by default all variables are final). There may be final variables in abstract classes.</p></li><li><p>Methods of interface are public by default. Methods of abstract class can have modifiers such as public, private...</p></li><li><p>Interface can extend another interface only but cannot extend any type of class. Abstract class can extend another java class, implement multiple java interfaces and extend only one abstract class.</p></li></ol><p>Any times I read that above list, the only thing I see is that Abstract class has power in share <code>source code</code> through inheritance (of course we all know that inheritance is not good, we will discuss about this in another post), unlike Interface that share the <code>contract</code> through method declaration. All other features of Abstract class are just for support that responsibility.</p><p>On the other hand, we knew that object oriented programming is programming, in which we represent real objects by create the object blueprint call <code>class</code>. <strong>So every class should be existed to help us make object from it!!!</strong> In case of Abstract classes, since we can't create object from them, why do they still exist? Is this a bug in the design of Java where the main responsibility of Abstract class is not supporting object oriented programming but supporting <code>class oriented programming</code>?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Difference between Abstract class and Interface is one of the most be confused problem when the first time I learnt Java. In which case we should use Abstract class and which case we should use Interface? Let&#39;s take a deeper look in this two of concepts.&lt;/p&gt;
    
    </summary>
    
    
      <category term="design" scheme="https://fromnoobstogeeks.com/tags/design/"/>
    
      <category term="oop" scheme="https://fromnoobstogeeks.com/tags/oop/"/>
    
      <category term="thinking" scheme="https://fromnoobstogeeks.com/tags/thinking/"/>
    
  </entry>
  
  <entry>
    <title>How much your objects encapsulate ?</title>
    <link href="https://fromnoobstogeeks.com/2019/02/24/encapsulate/"/>
    <id>https://fromnoobstogeeks.com/2019/02/24/encapsulate/</id>
    <published>2019-02-24T18:46:19.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>Encapsulate ( tài liệu tiếng Việt thường dịch là <code>đóng gói</code> ) hay được nhắc đến và ví dụ như là cách để <code>che giấu</code> thông tin trong lập trình hướng đối tượng.</p><a id="more"></a><blockquote><p>Tức là trạng thái của đối tượng được bảo vệ không cho các truy cập từ code bên ngoài như thay đổi trong thái hay nhìn trực tiếp. Việc cho phép môi trường bên ngoài tác động lên các dữ liệu nội tại của một đối tượng theo cách nào là hoàn toàn tùy thuộc vào người viết mã. Đây là tính chất đảm bảo sự toàn vẹn, bảo mật của đối tượng Trong Java, tính đóng gói được thể hiện thông qua phạm vi truy cập (access modifier).</p></blockquote><p>Từ <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)" target="_blank" rel="noopener">wiki</a> ta có định nghĩa</p><blockquote><p>Encapsulation is one of the fundamentals of OOP (object-oriented programming). It refers to the bundling of data with the methods that operate on that data. Encapsulation is used to hide the values or state of a structured data object inside a class, preventing unauthorized parties' direct access to them. Publicly accessible methods are generally provided in the class (so-called getters and setters) to access the values, and other client classes call these methods to retrieve and modify the values within the object.</p></blockquote><p>Những thứ nổi lên và dễ đập vào mắt nhất khi đọc định nghĩa này là &quot;đảm bảo sự toàn vẹn&quot;, &quot;không cho các truy cập từ code bên ngoài&quot;, &quot;hide the values or state&quot;,...đại ý là cấm thay đổi trực tiếp value và state nhưng sau cùng lại có <code>getters and setters</code> @@ nếu đã tồn tại 2 thứ này, sau cùng vẫn có cách để bạn thay đổi value hay state của object, vậy rút cuộc encapsulate mang ý nghĩa gì, và liệu cách hiểu như vậy có phải là một cách hiểu đúng :))</p><p>Thử nghĩ lại một chút qua ví dụ sau:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HTTP(<span class="string">"https://www.google.com"</span>).read();</span><br><span class="line"><span class="keyword">new</span> HTTP().read(<span class="string">"https://www.google.com"</span>);</span><br></pre></td></tr></table></figure><p>Có gì khác biệt giữa 2 cách code trên ? Class <code>HTTP</code> thứ nhất encapsulate URL như là một thành phần của chính nó, trong khi class <code>HTTP</code> thứ hai nhận vào URL như là biến cần thiết để thực hiện hành vi <code>read()</code>. Về cơ bản, object tạo bởi 2 class nói trên khi gọi read đều thực hiện cùng một hành vi: chúng đọc nội dung từ google. Vậy cách dùng nào <code>đúng</code> ? Câu trả lời có vẻ là tuỳ thuộc vào việc dùng chúng vào mục đích gì.</p><p>Một cách mô tả về object trong OOP mà ai cũng biết, object là <code>thế hiện của một thực thể trong thực tế</code>! Object tồn tại trong cái môi trường được gọi là thực tế đó và biết cách <code>tương tác với môi trường</code> thông qua các <code>hành vi</code>. Nếu vậy trong ví dụ về object của 2 class <code>HTTP</code> bên trên, những object đó thể hiện cho đối tượng nào trong thực tế? Rõ ràng, mỗi class (với thiết kế khác nhau) thể hiện cho một thực thể khác nhau :)</p><p>Class <code>HTTP</code> thứ nhất, nhận vào một URL thông qua constructor, nó chỉ cho ta biết rằng: object của class này sau khi được khởi tạo thông qua constructor sẽ là thể hiện cho một trang web (cái mà được trỏ đến bởi URL).</p><p>Class <code>HTTP</code> thứ hai, với một constructor không có tham số, nó chỉ ra rằng: object khởi tạo bởi nó là thể hiện của...vũ trụ (the Universe)!</p><p>Có một cách đơn giản để biết một class là thể hiện của thực thể nào trong thực tế, đó là <code>nhìn vào constructor</code> - hay một cách cụ thể hơn: cách tạo ra object thuộc kiểu của class đó</p><blockquote><p>In order to understand what real-life entity an object represents, look at its constructor.</p></blockquote><p>Về cơ bản, class nắm giữ cách tạo ra object trong môi trường object tồn tại, định nghĩa về object được xác định thông qua cách mà nó được tạo ra. Các tham số được truyền vào cho constructor và được encapsulate bởi object, nhằm định nghĩa object đó là thể hiện của thực thể nào trong môi trường.</p><p>Và bây giờ, thử làm rõ hơn câu hỏi đã đề ra: <strong>class nào trong 2 class HTTP đã đưa ra được thiết kế đúng?</strong> bằng cách thay nó bởi câu hỏi: <strong>class nào thể hiện thực thể tốt hơn? web page hay the Universe?</strong> Tuy nhiên có một điều chúng ta đã biết: trong phần lớn trường hợp, càng tập trung thể hiện một thực thể đủ nhỏ - ta nắm rõ bao nhiêu, object ta thiết kế ra càng bền vững và gắn kết (solid &amp; cohesive) bấy nhiêu.</p><p>Mặt khác, đôi khi chúng ta cũng cần những object thể hiện các thực thể có độ lớn như vũ trụ. Ví dụ như trong trường hợp class <code>HTTP</code> thứ hai bên trên:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// read via HTTP and return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">online</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// check whether we're online</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nó có thể không phải là một thiết kế tốt, tuy nhiên nó cần thiết nếu như muốn thể hiện những thực thể có kích thước vũ trụ. Một object của class <code>HTTP</code> trên có thể đọc thông tin từ bất cứ trang web nào trên internet (có lẽ số lượng cũng nhiều và đủ lớn để so sánh với kích thước vũ trụ?), và đồng thời biết cách kiểm tra xem trạng thái hiện tại của những trang web đó,...tất nhiên với một object là thể hiện của vũ trụ, không có gì giới hạn việc bạn thêm vào bao nhiêu hành vi cho nó cả :)). Trong trường hợp này, chúng ta thực sự không cần thiết phải encapsulate bất cứ gì vào trong nó.</p><p>Tôi tin rằng, <strong>những object với thiết kế để thể hiện cho thực thể vũ trụ là những object có thiết kế không tốt!</strong> Một trong những lý do chính vì chúng ta chỉ có một vũ trụ (the Universe) - hay ít nhất, trong trường hợp nó có nhiều phiên bản, nó cũng khá tương tự nhau đối với chúng ta; tại sao chúng ta phải thiết kế nhiều thể hiện khác nhau cho nó chứ? :))</p><p>Tham khảo: https://www.yegor256.com/2014/12/15/how-much-your-objects-encapsulate.html</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Encapsulate ( tài liệu tiếng Việt thường dịch là &lt;code&gt;đóng gói&lt;/code&gt; ) hay được nhắc đến và ví dụ như là cách để &lt;code&gt;che giấu&lt;/code&gt; thông tin trong lập trình hướng đối tượng.&lt;/p&gt;
    
    </summary>
    
    
      <category term="design" scheme="https://fromnoobstogeeks.com/tags/design/"/>
    
      <category term="oop" scheme="https://fromnoobstogeeks.com/tags/oop/"/>
    
      <category term="thinking" scheme="https://fromnoobstogeeks.com/tags/thinking/"/>
    
  </entry>
  
  <entry>
    <title>Fun thing with browser inspect</title>
    <link href="https://fromnoobstogeeks.com/2018/08/31/content-trick/"/>
    <id>https://fromnoobstogeeks.com/2018/08/31/content-trick/</id>
    <published>2018-08-31T02:55:20.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>Chắc hẳn ít ai có thể mạnh miệng khẳng định rằng: Trong suốt quãng thời gian từ khi biết đến internet cho đến hiện tại, chưa một lần từng tải nội dung số không vi phạm bản quyền trên internet. Nói vậy bởi vì đơn giản như một bức ảnh bạn tải từ 1 trang web đã public cũng có thể là ảnh được lấy một cách không chính thức từ một nguồn nào đó :)) Về phía người dùng, họ luôn muốn nhận nhiều hơn, ngược lại tất nhiên người sở hữu nội dung số (media content) không muốn vậy :))</p><a id="more"></a><p>Một cách chắc chắn, có thể nói, những gì đã hiển thị trên thiết bị của bạn, nó đã ở trong tay bạn - vấn đề chỉ là <strong>làm thế nào để lấy được nó thôi</strong> ( ͡° ͜ʖ ͡°) . Cũng như đã nói ở trên, việc chặn để người dùng không lấy content một cách dễ dàng là một vấn đề mà bất cứ người làm dịch vụ trực tuyến nào cũng phải giải quyết. Trong cả tá những cách hại não mà ai cũng có thể kể ra (mà chẳng biết có bao nhiêu người làm) thì một trong những phương pháp đơn giản nhưng có vẻ mang lại hiệu quả khá tốt là: chặn để người dùng <strong>không tương tác trực tiếp</strong> được với content trên thiết bị của họ. Có cả đống cách dạng này kiểu như: chặn chuột phải, chặn inspect (của browser), mã hoá content trả về cho device,...và dù là cách nào thì nếu chịu khó mò cũng có thể qua được.</p><p>Chắc hẳn là developer, không ai lạ lẫm gì với công cụ inspect của trình duyệt. Nó là một công cụ tuyệt vời! Debug, view request, kiểm tra phần tử,...nếu hỏi một điểm bắt đầu tốt khi muốn &quot;chôm&quot; một cái gì đó từ web, chắc chắn là thử inspect nó :)).</p><p>Mọi chuyện sẽ chẳng có gì, nếu như hôm nay, trong khi đang tìm cách <strong>lưu lại một số content đã hiển thị trên thiết bị cá nhân</strong>, mình bắt gặp được một trường hợp khá thú vị như sau:</p><p><img src="https://thumbs.gfycat.com/DistantKindlyCub-size_restricted.gif"></p><p>Công cụ inspect của trình duyệt gần như đã bị khoá bởi việc liên tục nhảy vào debugging mode (giống như break point mà các ide hỗ trợ) - một cách khá thông minh :)) Bất cứ khi nào next step, sẽ có 1 debugging block mới được sinh ra và trình duyệt sẽ lại nhảy vào debugging mode, đồng thời theo đó, chức năng kiểm tra phần tử hay bắt request thông qua network cũng sẽ bị khoá (do trình duyệt đang dump).</p><p>Lục mò đoạn code gây ra cái cách &quot;khắm bựa&quot; trên, mình bắt được đoạn js có vẻ hack não này</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    !<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            !<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">                (<span class="number">1</span> !== (<span class="string">""</span> + t / t).length || t % <span class="number">20</span> === <span class="number">0</span>) &amp;&amp; <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">                .constructor(<span class="string">"debugger"</span>)(),</span><br><span class="line">                    c(++t)</span><br><span class="line">            &#125;(<span class="number">0</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (n) &#123;</span><br><span class="line">            setTimeout(t, <span class="number">1e3</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>Để hiểu được đoạn code trên chúng ta tạm chấp nhận một số điểm sau trong js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; !<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;()          <span class="comment">// will run foo()</span></span><br><span class="line">&gt; <span class="literal">true</span> &amp;&amp; funtion foo() &#123;&#125;()    <span class="comment">// will run foo()</span></span><br><span class="line">&gt; <span class="literal">false</span> &amp;&amp; funtion bar() &#123;&#125; ()  <span class="comment">// will not run bar()</span></span><br></pre></td></tr></table></figure><p>Giải thích chi tiết hơn cho thứ bựa bên trên có thể tìm thấy tại <a href="https://stackoverflow.com/questions/3755606/what-does-the-exclamation-mark-do-before-the-function" target="_blank" rel="noopener">đây</a>.</p><p>Ý tưởng chính của đoạn code trên đến từ đoạn</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; !<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;.constructor(<span class="string">"debugger"</span>)()</span><br></pre></td></tr></table></figure><p>Đem đoạn code trên chạy thử trên trình duyệt, kết quả sẽ na ná như sau</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">&gt; a.constructor(<span class="string">"debugger"</span>)</span><br><span class="line"><span class="comment">// ƒ anonymous() &#123; debugger &#125;</span></span><br></pre></td></tr></table></figure><p><code>constructor</code> property trả về hàm contructor của function a, có một đặc điểm đặc biệt ở đây là, nếu thử</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&gt; foo.constructor</span><br><span class="line"><span class="comment">// ƒ Function() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><p>Argument được truyền vào thông qua contructor được treat như là navtive code trong function :)). Do đó <code>a.constructor(&quot;debugger&quot;)</code> trong ví dụ trên sinh ra 1 hàm với thân hàm có nhiệm vụ duy nhất là trigger browser của bạn nhảy vào debug mode :)). Kết hợp với trick để run hàm phía bên trên, ta có được nhân của đoạn code block inspect là hàm <code>c()</code> như sau.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    (<span class="number">1</span> !== (<span class="string">""</span> + t / t).length || t % <span class="number">20</span> === <span class="number">0</span>) &amp;&amp; <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    .constructor(<span class="string">"debugger"</span>)(),</span><br><span class="line">        c(++t)</span><br><span class="line">&#125;(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>bootstrap hàm <code>c()</code> với giá trị t = 0</li><li>check control expression, expect giá trị <code>true</code> =&gt; gen hàm ƒ anonymous() { debugger }</li><li>chạy hàm anonymous vừa gen trên, đưa browser về debug mode</li><li>nếu user next step trong debug mode, gọi đệ quy hàm <code>c()</code></li></ul><p>Phần còn lại là <code>try catch</code> block, trong case lỗi thì tự động boostrap lại toàn bộ luồng trên sau 1s bằng <code>setTimeout()</code>. Để ý ở đây trong case biểu thức điều khiển sinh hàm <code>function(){}.constructor(&quot;debugger&quot;)()</code> nếu false và không được chạy nhiều lần, có khả năng đệ quy liên tục hàm <code>c()</code> và bạn sẽ nhận được lỗi dạng thế này</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RangeError: Maximum call stack size exceeded</span><br><span class="line">    at c (recursion.js:1)</span><br><span class="line">    at c (recursion.js:7)</span><br><span class="line">    at c (recursion.js:7)</span><br><span class="line">    at c (recursion.js:7)</span><br><span class="line">    at c (recursion.js:7)</span><br><span class="line">    at c (recursion.js:7)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Yixr3jv.gif"></p><p>Ok đến đây coi như đã hiểu thêm được một cách block user khá thú vị, tuy nhiên content thì mình vẫn muốn lấy ( ͡° ͜ʖ ͡°) . Tất nhiên, khi đã mò được đến đoạn code gây ra kết quả trên thì <strong>chỉ cần xoá nó đi</strong> là xong :)) Tuy nhiên còn một cách khác (và nó là nguyên nhân chính khiến mình viết bài này), đó là <strong>dùng chính chức năng của browser</strong> - giống như cách mà dev &quot;đối phương&quot; dùng, lợi dụng tính năng debugger của browser!</p><p><img src="https://i.imgur.com/vylppVW.png"></p><p>Đáp án ở ngay bên cạnh đề bài :)) Vị trí được trỏ đến trong ảnh là chức năng <code>Deactivate breakpoints</code> của browser, tất cả các breakpoint (bao gồm cả các breakpoint sinh ra từ sau do hiệu quả của vòng đệ quy bên trên) đều sẽ bị vô hiệu ( ͡° ͜ʖ ͡°) .</p><p>Khi lần đầu mình gặp cách block người dùng này, mình đã nghĩ nó là bug do đội dev quên mất chưa xoá debugger ( ͡° ͜ʖ ͡°) sau khi đọc được đoạn nguyên nhân gây ra nó, mình chắc chắn nó là do cố ý :)). <strong>Nó có sáng tạo không? Chắc chắn là có! Nó có hiệu quả không? Mình cũng không chắc nữa :))</strong> Bài học rút ra, khi bạn có ý tưởng mới nào đó, hãy chắc chắn xem xét hiệu quả của nó trước khi bỏ công ra để làm nó (điều này đúng với cả mình, thay vì bỏ công ra ngồi mò đoạn code trên thì khi biết nó là breakpoint, mình nên tắt luôn nó đi cho rồi T.T ).</p><p>Hết rồi :)) Code sample của trick trên có thể tìm thấy tại <a href="https://github.com/khanhtc1202/tricks/tree/master/block" target="_blank" rel="noopener">đây</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Chắc hẳn ít ai có thể mạnh miệng khẳng định rằng: Trong suốt quãng thời gian từ khi biết đến internet cho đến hiện tại, chưa một lần từng tải nội dung số không vi phạm bản quyền trên internet. Nói vậy bởi vì đơn giản như một bức ảnh bạn tải từ 1 trang web đã public cũng có thể là ảnh được lấy một cách không chính thức từ một nguồn nào đó :)) Về phía người dùng, họ luôn muốn nhận nhiều hơn, ngược lại tất nhiên người sở hữu nội dung số (media content) không muốn vậy :))&lt;/p&gt;
    
    </summary>
    
    
      <category term="trick" scheme="https://fromnoobstogeeks.com/tags/trick/"/>
    
      <category term="javascript" scheme="https://fromnoobstogeeks.com/tags/javascript/"/>
    
      <category term="dev tool" scheme="https://fromnoobstogeeks.com/tags/dev-tool/"/>
    
  </entry>
  
  <entry>
    <title>Play around with goroutine</title>
    <link href="https://fromnoobstogeeks.com/2018/07/21/play-around-with-gorountine/"/>
    <id>https://fromnoobstogeeks.com/2018/07/21/play-around-with-gorountine/</id>
    <published>2018-07-21T18:59:07.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>Hôm nay trong lúc lượn lờ <a href="https://tour.golang.org/list" target="_blank" rel="noopener">go tour</a> - một guide khá đầy đủ và thú vị giới thiệu về golang, mình bắt gặp một đoạn khá thú vị :)) <a id="more"></a></p><p>Trong mục concurrency in golang, giới thiệu về goroutine - một điểm rất mạnh của golang dùng thay thế cho thread trong các ngôn ngữ lập trình khác - item 7 có nhắc lại kiến thức về tree. Trong đó có đưa ra 1 quiz nhỏ như sau:</p><blockquote><p>There can be many different binary trees with the same sequence of values stored at the leaves. For example, here are two binary trees storing the sequence 1, 1, 2, 3, 5, 8, 13.</p></blockquote><p><img src="https://tour.golang.org/content/img/tree.png"></p><blockquote><p>A function to check whether two binary trees store the same sequence is quite complex in most languages. We'll use Go's concurrency and channels to write a simple solution.</p></blockquote><p>Một quiz nghe có vẻ đơn giản nhưng khi implement bằng một ngôn ngữ mới với công cụ mới nó cũng đem đến nhiều góc nhìn khá thú vị :))</p><p>Để giải quiz này, công cụ chúng ta cần là một phép duyệt tree, rất tự nhiên, phép duyệt được chọn để dùng trong trường hợp này là <strong>duyệt thứ tự trước</strong> hay <code>LNR</code> (một lý do khác để chọn phép duyệt này là hint của quiz cũng gợi ý dùng phép này :)) )</p><p>Theo suy nghĩ thông thường, ta có implement của phép duyệt LNR đơn giản như sau</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LNR</span><span class="params">(Tree T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">LNR(T-&gt;Left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, T-&gt;value);</span><br><span class="line">LNR(T-&gt;Right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Do quiz yêu cầu sử dụng <code>goroutine</code> - kết quả trả về từ goroutine cho main (có thể coi cũng là 1 goroutine khác) thông qua <code>channel</code> (các khái niệm đã nhắc đến trên đều được giải thích rất chi tiết trong <a href="https://tour.golang.org/list" target="_blank" rel="noopener">go tour</a> do đó không được nhắc lại trong bài viết nữa). Từ đó ta có implement đơn giản như sau:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WalkRecursion</span><span class="params">(t *tree.Tree, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> t != <span class="literal">nil</span> &#123;</span><br><span class="line">WalkRecursion(t.Left, ch)</span><br><span class="line">ch &lt;- t.Value</span><br><span class="line">WalkRecursion(t.Right, ch)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> WalkRecursion(tree.New(<span class="number">1</span>), ch)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ch &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d, "</span>,i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile và chạy đoạn trên ta dính lỗi sau:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br></pre></td></tr></table></figure><p>Sở dĩ có lỗi trên là do vòng <code>for</code> đoạn in kết quả trong hàm main là infinite loop, nguyên nhân do <code>for i := range ch</code> chỉ dừng khi channel <code>ch</code> được đóng - trong khi trong đoạn implement trên mình chưa thực hiện <code>close(ch)</code> :v</p><p>Sử dụng <code>defer</code> để close là không hiệu quả, lý do chính vì defer trong scope của main sẽ đợi for loop kết thúc :)) (một trick khác cũng liên quan chút ít đến vấn đề này có thể tìm thấy trong post <a href="https://kipalog.com/posts/2-cach-de-lam-memory-leak-trong-golang" target="_blank" rel="noopener">này</a> )</p><p>Nghĩ một cách đơn giản hơn, ta chỉ cần close channel tại thời điểm <code>WalkRecursion</code> đã chạy xong là được! Hay nói cách khác - đóng channel trả về dữ liệu tại thời điểm hàm push dữ liệu (supplier) đã chạy xong. Và để làm được điều đó, tất nhiên ta sẽ làm ở goroutine có supplier đang chạy :D</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">WalkRecursion(tree.New(<span class="number">1</span>), ch)</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ch &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d, "</span>,i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Đoạn code trên đã chạy ngon :)) tuy nhiên nhìn hơi...nặng nề, có lẽ do trong hint của quiz cũng chỉ ghi dùng <code>go Walk(tree.New(1), ch)</code> để <code>kick off</code> hàm duyệt cây. Để đạt được yêu cầu đó, ta sẽ đi giấu phần close channel vào trong hàm duyệt! Ta có thể viết lại hàm duyệt tree như sau:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WalkEmbedded</span><span class="params">(t *tree.Tree, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(ch)</span><br><span class="line"><span class="keyword">var</span> walk <span class="function"><span class="keyword">func</span><span class="params">(t *tree.Tree)</span></span></span><br><span class="line"><span class="function"><span class="title">walk</span> = <span class="title">func</span><span class="params">(t *tree.Tree)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> t == <span class="literal">nil</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">walk(t.Left)</span><br><span class="line">ch &lt;- t.Value</span><br><span class="line">walk(t.Right)</span><br><span class="line">&#125;</span><br><span class="line">walk(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> WalkEmbedded(tree.New(<span class="number">1</span>), ch)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>P/S: Sau khi ngó nghía chán đống quiz rồi mình mới phát hiện ra có public solutions của golang team trên github :'( . Tham khảo thêm solutions của golang team tại <a href="https://github.com/golang/tour/tree/master/solutions" target="_blank" rel="noopener">đây</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hôm nay trong lúc lượn lờ &lt;a href=&quot;https://tour.golang.org/list&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;go tour&lt;/a&gt; - một guide khá đầy đủ và thú vị giới thiệu về golang, mình bắt gặp một đoạn khá thú vị :))
    
    </summary>
    
    
      <category term="golang" scheme="https://fromnoobstogeeks.com/tags/golang/"/>
    
      <category term="tree" scheme="https://fromnoobstogeeks.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>Using Package Manager ??</title>
    <link href="https://fromnoobstogeeks.com/2018/06/19/install-nodejs/"/>
    <id>https://fromnoobstogeeks.com/2018/06/19/install-nodejs/</id>
    <published>2018-06-19T01:13:17.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>Từ cái ngày trẻ trâu copy icon half-life vào usb cho đến khi biết click next next next trong installer của mấy cái app trên windows, bây giờ nhìn lại với mình vẫn là cả một bầu trời kỉ niệm :)) Từ hồi đó cũng gọi là có biết chút ít cái shell của windows nhưng cũng chẳng mấy khi động đến. Cho đến khi lần đầu tiếp xúc với linux, tương tác hồi đó vẫn chủ yếu là trỏ chuột. Dần dần khi đã quen và tương tác chuyển dần sang terminal, cảm giác cài app với command kể cũng ngầu ngầu :)).</p><a id="more"></a><p>Sự thần thánh của các package manager là không phải bàn cãi. Khi mới chuyển sang làm quen thử với bất cứ một bản distro nào mới, gần như việc đầu tiên mà bạn vô thức làm sẽ là kiểm tra xem package manager của distro đó là gì. Những cái tên không cần nhắc ai cũng biết đến như: <code>apt</code> cho debian base distro, <code>yum</code> cho redhat, <code>pacman</code> cho arch,... Những gói này được gọi là các <code>distribution package manager</code> (để phân biệt với 1 loại package manager nữa sẽ nói bên dưới).</p><p><img src="https://i.imgur.com/UeyPZjT.png"></p><p>Đặc biệt hơn, khi các ngôn ngữ lập trình cũng đều học theo tư tưởng đó, xây dựng những build automation tool cực mạnh như <code>gradle</code> của java, <code>npm</code> của nodeJS,... Bản thân một phần nhiệm vụ quan trong mà những tool đó đều có chính là package (dependencies) management.</p><p>Do chẳng có gì ngoài thời gian rảnh :)) mình đã cài và dùng thử qua kha khá package manager khác nhau (thuộc cả 2 &quot;loại&quot; package manager kể trên), tuy nhiên do chưa có điều kiện, đến tận khi đi làm, mình mới được sờ đến <del>MacBook</del> OS X (một phần cũng do mình không thích hackintosh).</p><p>Khi lần đầu được sờ đến <code>homebrew</code>, cảm nhận đầu tiên của mình là mình <strong>không thích nó</strong> :)) Lý do vì đơn giản là mình anti ruby, chỉ đơn giản vậy thôi :(. Tuy nhiên, trải nghiệm sử dụng thì hoàn toàn ngược lại với cảm nhận ban đầu :)) Cộng đồng support cho brew rất mạnh, bất cứ khi nào muốn cài đặt một gói nào đó, hầu như luôn có thể tìm thấy cách cài trực tiếp chỉ bằng 1,2 command dùng homebrew, có lẽ lý do cũng tương tự như tại sao nếu làm app mobile thì nên ưu tiên làm cho iOs :)).</p><p>Một thời gian dài trải nghiệm sự tiện lợi của homebrew, bản thân mình cũng bị lười đi :)) Mình bỏ thói quen tự setup <code>PATH</code>, tự build source,...dần dần tất cả giao cả lại cho brew là được. Nhưng đời ếu như mơ, thứ đem lại cái cảm giác tiện lợi đó không phải magic. Chỉ đơn giản là cái phần tay to ngày trước mình làm, package manager dev team đã viết thành code, mà cái gì có code thì rồi nó cũng sẽ có bug :))</p><p>Sau một lần <em>lỡ tay</em> làm cái gì đấy mà mình cũng không nhớ :)) <code>npm</code> trong máy của mình không thể cài các package với flag global (kể cả chỉ định chạy dưới quyền su). Lúc đấy thì vẫn như mọi khi, mình nghĩ đơn giản chỉ cần (tư dư cố hữu của dev - cái gì sai thì reset)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="comment"># remove old node and its config</span></span><br><span class="line">$ brew uninstall node &amp;&amp; brew prune</span><br><span class="line">$ rm -f /usr/<span class="built_in">local</span>/bin/npm /usr/<span class="built_in">local</span>/lib/dtrace/node.d ~/.npm</span><br><span class="line">$ <span class="comment"># reinstall node</span></span><br><span class="line">$ brew install node</span><br></pre></td></tr></table></figure><p>Cứ nghĩ là đến đây là êm xuôi...nhưng mọi chuyện lại không đơn giản như vậy :( Tại thời điểm lúc đó, brew tool đang có lỗi trong cài đặt gói <code>npm</code> - gói đi kèm khi cài đặt <code>node</code>. Vấn đề có vẻ nằm ở chính việc cố gắng update npm bằng lệnh <code>npm update npm -g</code> theo như giải thích ở <a href="https://gist.github.com/DanHerbert/9520689" target="_blank" rel="noopener">đây</a>. Nguyên văn đoạn cần đọc</p><blockquote><p>The root of the the issue is really that npm is its own package manager and it is therefore better to have npm manage itself and its packages completely on its own instead of letting Homebrew do it.</p></blockquote><p>Chính việc sử dụng nhiều package manager bản thân nó cũng gây ra vấn đề :)) Lỗi đã được báo lần đầu cách đây 4 năm nhưng có vẻ vì một lý do nào đó, nó lại xuất hiện trong thời gian gần đây ( để ý <code>Last active</code> của gist trên chỉ trong khoảng 1 tuần gần đây ). Câu trả lời cho vấn đề và một cách giải quyết chi tiết hơn có thể được tìm thấy ở <a href="https://gist.github.com/rcugut/c7abd2a425bb65da3c61d8341cd4b02d" target="_blank" rel="noopener">đây</a>.</p><p>Điểm chung của những cách trên đối với mình là nó <em>quá dài</em> và nhiều bước config, còn mình thì lại lười và ngại đọc :( Để giải quyết tình hình, và cũng do có chút thời gian rảnh ( thực ra là nhiều vãi ), mình quyết định trở lại như xưa - không dùng manager tool nữa mà manual <strong>^^'</strong>.</p><p>Về cơ bản thì các gói đều có source file và build script, có thể tìm và tải chúng ( từ trang chủ đối với các gói nổi tiếng nhiều người dùng ) dưới dạng các file nén - thường là <code>.tar.gz</code>.</p><p>Ví dụ để cài node từ source đơn giản có thể làm theo các bước sau:</p><ol type="1"><li><p>Tải source &amp; giải nén: với node có thể tìm thấy tại <a href="https://nodejs.org/dist/" target="_blank" rel="noopener">đây</a>. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https://nodejs.org/dist/v8.11.3/node-v8.11.3-darwin-x64.tar.gz \</span><br><span class="line"> | tar xvz</span><br></pre></td></tr></table></figure></p></li><li><p>Copy thư mục source sang <code>/usr/local/bin</code> (lưu ý nên để ở đây thay vì <code>/usr/bin</code> đối với source locally compiled) <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv node-v8.11.3-darwin-x64/ /usr/<span class="built_in">local</span>/node</span><br></pre></td></tr></table></figure></p></li><li><p>Thêm path đến bin/ của node vừa copy vào <code>$PATH</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/node/bin"</span> &gt;&gt; <span class="variable">$YOUR_SHELL_RC</span></span><br></pre></td></tr></table></figure></p></li></ol><p>Lưu ý: trong trường hợp trong bin/ của package sau giải nén chưa có nội dung (source chưa được build), đọc README và build lại theo hướng dẫn là cách đơn giản hơn nhiều so với việc tiếp tục mò google với hi vọng tìm được một cách ăn sẵn nào đó :))</p><p>DONE! Đơn giản và không phải đau đầu về vụ depend lẫn nhau giữa các package manager nữa :)) Về cơ bản thì mình thấy cách cài từ source có xịt thì cũng là do bạn thôi, không phải đổ lỗi cho người khác nữa nên đỡ mất công tìm :))</p><p>Đến đây là hết rồi :)) Dạo gần đây mình cũng lười, nên viết lại cái note coi như tự nhắc nhở bản thân :v Về cơ bản là <strong>không có magic</strong> - chỉ <strong>là code của một người nào đó chạy ở chỗ nào đó</strong> khác thôi, cứ từ từ mà tìm :)).</p><p>P/S: Install script tải node theo flow trên có thể tìm thấy tại <a href="https://gist.github.com/khanhtc1202/ef1a256223c804364e692f2d6dff02ca" target="_blank" rel="noopener">đây</a> hoặc tải trực tiếp tại <a href="https://gist.githubusercontent.com/khanhtc1202/ef1a256223c804364e692f2d6dff02ca/raw/7c7e80e704a5901896d876a70ddcdf71e65a540e/install-node-js" target="_blank" rel="noopener">đây</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Từ cái ngày trẻ trâu copy icon half-life vào usb cho đến khi biết click next next next trong installer của mấy cái app trên windows, bây giờ nhìn lại với mình vẫn là cả một bầu trời kỉ niệm :)) Từ hồi đó cũng gọi là có biết chút ít cái shell của windows nhưng cũng chẳng mấy khi động đến. Cho đến khi lần đầu tiếp xúc với linux, tương tác hồi đó vẫn chủ yếu là trỏ chuột. Dần dần khi đã quen và tương tác chuyển dần sang terminal, cảm giác cài app với command kể cũng ngầu ngầu :)).&lt;/p&gt;
    
    </summary>
    
    
      <category term="manual" scheme="https://fromnoobstogeeks.com/tags/manual/"/>
    
      <category term="dev tool" scheme="https://fromnoobstogeeks.com/tags/dev-tool/"/>
    
      <category term="package manager" scheme="https://fromnoobstogeeks.com/tags/package-manager/"/>
    
  </entry>
  
  <entry>
    <title>Ninja Code</title>
    <link href="https://fromnoobstogeeks.com/2018/06/05/ninja-code/"/>
    <id>https://fromnoobstogeeks.com/2018/06/05/ninja-code/</id>
    <published>2018-06-05T17:10:45.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>Nếu coding giống như một trận chiến giữa programer và problem cần giải quyết thì, giống như những chiến binh thực thự, chúng ta tìm kiếm đạo (phương pháp chiến đấu) phù hợp cho chính mình. Trong bạt ngàn những đạo (những nguyên lý), kinh dịch (article trên blog của những blogger nổi tiếng), chú thích kinh nghiệm (những note, post được đông đảo dev <code>kip</code> lại),...đâu đó quanh đây vẫn tồn tại một đạo mà không mấy ai để ý đến nhưng số người theo thì đếm không kể hết. Có người đắc đạo hoàn toàn, có người một phần, tuy theo nhiều mức độ khác nhau nhưng tựu chung có thể coi đều là đồng đạo trong môn phái này :))</p><a id="more"></a><blockquote><p>Chú ý: Bài viết lược dịch từ <a href="https://javascript.info/ninja-code" target="_blank" rel="noopener">đây</a>. Đối với tôi, không có từ nào nhận xét tốt hơn cho bản gốc của bài viết này ngoài 2 chữ <code>tuyệt vời</code> :)).</p></blockquote><p>Trong khuôn khổ bài viết, đạo này được naming là <strong>ninja đạo</strong> - người theo đạo được naming là các ninja (ninja đắc đạo là những ninja tuân thủ nghiêm ngặt theo những đạo lý được liệt kê trong bài viết này).</p><h1 id="đạo-lý-trong-ninja-đạo">Đạo lý trong ninja đạo</h1><p><img src="https://i.imgur.com/9gCBJvO.jpg"></p><p>Chúng ta sẽ cùng điểm qua những giáo lý chủ đạo của đạo phái này. (chú ý, source code sử dụng trong bài viết là javascript, tuy nhiên mở rộng ra nó có thể là bất cứ ngôn ngữ nào, bởi môn sinh theo học ninja đạo là vô biên)</p><blockquote><p>Rất nhiều môn sinh theo ninja đạo. Chỉ một số ít thành công.</p><p><cite>Confucius</cite></p></blockquote><h2 id="ngắn-gọn-là-đích-đến-của-sự-thông-tuệ">Ngắn gọn là đích đến của sự thông tuệ</h2><p>Code của bạn <strong>càng ngắn gọn, bạn càng thông minh</strong> hơn thằng ngồi ở block bên cạnh.</p><p>Lấy ví dụ, tất cả chúng ta từ khi bắt đầu học lập trình đều biết đến phép toán <code>?</code> và cách nó biến đổi biểu thức điều kiện if về dạng oneline kì diệu như thế nào.</p><p>Xem ví dụ bên dưới:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// taken from a well-known javascript library</span></span><br><span class="line">i = i ? i &lt; <span class="number">0</span> ? Math.max(<span class="number">0</span>, len + i) : i : <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>Một ninja đạt cảnh giới cao viết những block code tuyệt vời như vậy! Sẽ chẳng có vấn đề gì nếu nó nằm sâu ngàn lớp trong một thư viện <strong>high performance</strong> nào đó, nhưng điều gì sẽ xảy ra nếu người động đến đoạn code này là một môn sinh trẻ tuổi? Hẳn là môn sinh non nớt đó sẽ phải bỏ ra kha khá thời gian để bắt được giá trị của <code>i</code> khi muốn debug đoạn code này.</p><p>Và rồi đến khi không thể tìm ra lời giải thích thoả đáng cho cái lỗi hắn đang phải debug, hắn sẽ tìm đến bạn (một ninja cảnh giới cao hơn) để hỏi về nó, hãy nói với hắn &quot;Ngắn hơn luôn tốt hơn!&quot;, mở cho anh ta con đường đến với ninja đạo.</p><h2 id="biến-số-một-chữ-cái">Biến số một chữ cái</h2><blockquote><p>Người Dao ẩn mình bằng sự im lặng. Cái gì người Dao đã bắt đầu, chỉ người Dao biết cách kết thúc nó.</p><p><cite>Laozi (Tao Te Ching)</cite></p></blockquote><p>Đối với một ninja, không gì quan trọng hơn là kĩ năng ẩn mình. Vậy kĩ năng ẩn mình của một ninja đắc đạo thể hiện ở đâu? Nó thể hiện từ những thứ nhỏ nhất như là tên biến...</p><p>Đặt tên biến <code>một-chữ-cái</code> (như là <code>a</code>, <code>b</code> hay <code>c</code>) giúp các ninja thượng đẳng tăng tốc độ code một cách đáng kể!</p><p>Tên biến một chữ cái trong 1 block code giống như những ninja ẩn trốn trong rừng cây. Không ai có thể tìm ra họ! Kể cả công cụ search của editor (<code>ctrl+F</code> hoặc <code>cmd+F</code>) cũng phải đầu hàng trước những biến này. Mặt khác kể cả khi tìm ra, không ai (trừ gã <code>người Dao</code> bên trên) biết được ý nghĩa của biến <code>a</code> hay <code>b</code> đó là gì.</p><p>...Tuy nhiên vẫn có một ngoại lệ. Một ninja đắc đạo sẽ không bao giờ dùng biến một-chữ-cái như <code>i</code> để làm biến đếm trong vòng <code>for</code>. Lý do tại sao à, đơn giản là vì còn rất nhiều lựa chọn khác ngoài <code>i</code>, như <code>x</code> hay <code>y</code> chẳng hạn.</p><p>Một ninja thực thụ sẽ không bao giờ để biến của anh ta dễ dàng bị bắt chỉ bởi dùng một chữ cái ai cũng biết như <code>i</code> được. Và đặc biệt, khi độ dài của vòng <code>loop</code> đó lên đến 1-2 trang (trang ở đây chỉ độ dài hiển thị source code trên một màn hình - nếu có thể, hãy cố gắng làm cho vòng for của bạn dài đến 3 trang, điều này giúp biến của bạn ẩn mình tốt hơn), khi đó bạn đã ngộ được nguyên lý để ẩn mình thực sự.</p><h2 id="rút....gọn">Rút....gọn</h2><p>Nếu team của bạn có quy định về cấm sử dụng biến một-chữ-cái hoặc tên-vô-nghĩa, hãy lách luật bằng cách rút gọn chúng.</p><p>Một số ví dụ như: - list → lst. - userAgent → ua. - browser → brsr. - …etc</p><p>Phải là một ninja đắc đạo hoặc là có trực giác tốt mới có thể hiểu được ý nghĩa ẩn giấu dưới những cái tên này. Hãy cố gắng rút gọn mọi thứ, nó là một lớp lọc rất tốt. Chỉ những người thực sự có năng lực mới có thể hiểu và có quyền động vào source code của bạn.</p><h2 id="trừu-tượng-là-mục-tiêu">Trừu tượng là mục tiêu</h2><blockquote><p>The great square is cornerless The great vessel is last complete, The great note is rarified sound, The great image has no form.</p><p><cite>Laozi (Tao Te Ching)</cite></p></blockquote><p>Khi đặt tên biến, trong hàng trăm lựa chọn, hay chọn cái tên trừu tượng nhất. Giống như obj, data, value, item, elem,...etc.</p><ul><li>Cái tên lý tưởng để đặt cho bất cứ biến nào là <code>data</code>, lý do đơn giản vì nó là từ chính xác nhất để miêu tả nhiệm vụ của biến - lưu trữ data!</li></ul><p>Nhưng làm thế nào khi cái tên <code>data</code> đã bị một ninja khác trong team dùng mất? Hãy thử <code>value</code>! Sau cùng thì mọi biến đều sẽ nhận một giá trị nào đó, nên cái tên value là hoàn toàn có thể chấp nhận được.</p><ul><li>Mặt khác, bạn hoàn toàn có thể đặt tên cho biến bằng loại giá trị mà biến đó lưu. Ví dụ như: <code>str</code>, <code>num</code>,...</li></ul><p>Một môn sinh trẻ tuổi có thể ban đầu cảm thấy lạc lõng và tự hỏi kĩ năng đặt tên biến như trên có thực sự giúp ích cho một ninja? Hãy tự tin và nói với anh ta &quot;chắc chắn rồi!&quot;.</p><p>Thật vậy, những cái tên trên thực sự vẫn mang trong nó ý nghĩa: <code>str</code> thể hiện biến đó đang lưu một chuỗi gì đó, <code>num</code> sẽ lưu một số,... Nhưng khi có ai đó bên ngoài thử cố gắng hiểu đoạn code của bạn, họ sẽ bất ngờ nhận ra cái tên đó chẳng mang một ý nghĩa cụ thể nào cả :)) họ sẽ phải từ bỏ việc đào bới đoạn code và như vậy biến cùng với logic của bạn được <strong>an toàn</strong> là của bạn.</p><p>Không có cách nào để thực sự hiểu được đoạn code của bạn - một ninja thượng đẳng - ngoại trừ việc dành nhiều thời gian cho nó và phải thực sự tĩnh tâm :)) Bạn sẽ bất ngờ về khả năng đọc code của môn sinh mới sau vài tháng luyện tập.</p><ul><li>Vậy phải làm gì khi hầu hết những cái tên phía trên đều rất dễ bị một ninja khác trước bạn dùng mất? Đơn giản, chỉ cần <strong>THÊM SỐ VÀO</strong> : <code>data1</code>, <code>data2</code>, <code>value3</code>, <code>str4</code>,...etc.</li></ul><h2 id="kiên-định">Kiên định</h2><p>Sự tập trung cũng là một trong những yếu tố phân định đẳng cấp của một ninja! Chỉ những ninja đã thực sự tập trung và kiên nhẫn mới đủ tư cách đi cùng những ninja thượng đẳng khác. Vậy làm cách nào để thử thách họ - những môn sinh non trẻ?</p><p>Một cách đơn giản, hãy <strong>sử dụng những cặp tên dễ nhầm lẫn đặt tên biến</strong> như là <code>data</code> &amp; <code>date</code>. Sau đó mix chúng lại với nhau! Sẽ không ai có thể nhanh chóng đọc được source code của bạn, và rồi khi có lỗi typo (lỗi đánh máy) Uhm...chúng ta sẽ còn kẹt ở đây khá lâu, một tách trà trước khi tiếp tục không phải một ý tưởng tồi...</p><h2 id="tiền-tố">Tiền tố</h2><blockquote><p>Rất khó để có thể bắt được con mèo đen trong một căn phòng tối. Nhất là khi trong đó chẳng có con mèo nào.</p><p><cite>Confucius</cite></p></blockquote><p>Sử dụng những từ gần nghĩa là một cách khẳng định khả năng suy nghĩ linh hoạt và sáng tạo của một ninja thượng đẳng. Nó cũng làm cho code của team trở nên thú vị hơn rất nhiều :))</p><p>Xem xét ví dụ về tiền tố trong đặt tên. Khi muốn viết hàm hiển thị thông tin lên màn hình - hãy đặt tên nó với tiền tố <code>display</code>...chẳng hạn <code>displayMessage</code>!!! Khi có một chức năng khác cần hiển thị một cái gì đó khác lên màn hình, cố gắng tìm một từ gần nghĩa tương tự chẳng hạn <code>showName</code>!</p><p>Nhấn mạnh rằng có sự khác biệt tinh tế giữa các chức năng như vậy, trong khi không có sự khác biệt nào. Hoặc theo một hướng khác, hãy thử thảo luận và đưa ra một hiệp ước với các ninja đồng đội: Nếu như đối với chức năng hiển thị, A sẽ viết các function với tên bắt đầu bằng <code>display</code>, B sẽ bắt đầu bằng <code>render</code> còn bạn sẽ bắt đầu bằng...<code>paint</code> chẳng hạn. Càng nhiều ý tưởng, code của team sẽ càng đa dạng, môn sinh mới gia nhập càng có thêm ví dụ để thực hành. Vậy là bạn đã có sáng tạo của riêng mình và tiến thêm được một bước trên con đường ninja đạo.</p><p>...Và bây giờ là thời gian dành cho mẹo vặt!</p><p>Nếu đã <strong>đặt tiền tố khác nhau cho những chức năng tương tự nhau</strong>, còn gì cản bước bạn không thực hiện nốt phần còn lại: <strong>đặt tên tiền tố giống nhau cho những chức năng không mấy liên quan đến nhau</strong>?</p><p>Ví dụ, hàm <code>printPage(page)</code> sẽ sử dụng máy in, in trang hiện tại. Và hàm <code>printText(text)</code> sẽ hiển thị văn bản lên màn hình. Hãy để môn sinh xa lạ khi nghĩ về chức năng <code>printMessage(message)</code> - một cái tên cùng tiền tố - “Nó đặt thông điệp ở đâu? Để máy in hoặc trên màn hình? ”. Sẽ là một môn sinh đầy triển vọng nếu anh ta có thể làm cho nó thực sự tỏa sáng bằng một ý tưởng: <code>printMessage(message)</code> nên xuất nó trong cửa sổ mới!</p><h2 id="tái-sử-dụng-tên-biến-hàm...">Tái sử dụng tên (biến, hàm,...)</h2><blockquote><p>Once the whole is divided, the parts need names. There are already enough names. One must know when to stop.</p><p><cite>Laozi (Tao Te Ching)</cite></p></blockquote><p>Một ninja giỏi biết cách tăng tối đa hiệu quả sử dụng bộ nhớ bằng cách <strong>chỉ tạo biến mới khi thực sự cần thiết</strong>!</p><p>Một mặt tích cực khác là bạn đỡ tốn thời gian naming cho biến mới. Do đó tốt hơn cả là sử dụng lại biến với những cái tên đã có, chỉ cần <strong>thay giá trị mới cho chúng</strong>.</p><p>Một ninja thượng đẳng có thể viết ra những function hàng chục dòng logic mà chỉ sử dụng các biến được <strong>truyền vào dưới dạng tham số</strong>. Một môn sinh mới sẽ cảm thấy khó khăn để xác định được chính xác giá trị tại thời điểm hiện tại của một biến nào đó, hay biến đó đến từ đâu. Một người có trực giác yếu sẽ phải phân tích đoạn mã theo từng dòng, theo dõi sự thay đổi qua mỗi nhánh mã và sau cùng tuyệt vọng chạy thử đoạn mã trên giấy...</p><p>Một biến thể cao cấp của kĩ năng này là thử tráo (tạo clone) của biến đó bên trong vòng loop hoặc function. Những môn sinh yếu không hiểu rõ về những thứ như tham chiếu và tham trị thực sự sẽ phải quỳ gối trước những đoạn code như vậy.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">ninjaFunction</span><span class="params">(elem)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 20 lines of code working with elem</span></span><br><span class="line"></span><br><span class="line">  elem = clone(elem);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 20 more lines, now working with the clone of the elem!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Khi muốn làm việc với biến <code>elem</code> ở nửa sau của hàm, thậm chí, ngay cả một ninja khác cũng có thể sẽ phải bất ngờ...Chỉ khi debug đoạn code trên từng dòng, anh ta mới có cơ hội nhận ra mình đang làm việc với bản clone của biến đó.</p><h2 id="thể-hiện-tình-yêu-đối-với-những-gì-bạn-tạo-ra">Thể hiện tình yêu đối với những gì bạn tạo ra</h2><p>Hãy để những môn sinh trẻ tuổi thấy được sự tuyệt vời của những thứ bạn tạo ra! Những cái tên như <code>superElement</code>, <code>megaFrame</code> và <code>niceItem</code> chắc chắn sẽ soi sáng họ.</p><p>Thật vậy, một cái gì đó được naming: <code>super...</code>, <code>mega...</code>, <code>nice...</code> hẳn là một thứ tuyệt vời. Nhưng mặt khác - điều đó không mang lại thông tin chi tiết nào. Môn sinh trẻ tuổi có thể sẽ tự ngộ ra một ý nghĩa ẩn nào đó, sau khi đã thiền định trong một hoặc hai giờ.</p><h2 id="chồng-chéo-các-biến-bên-ngoài">Chồng chéo các biến bên ngoài</h2><blockquote><p>When in the light, can’t see anything in the darkness. When in the darkness, can see everything in the light.</p><p><cite>Guan Yin Zi</cite></p></blockquote><p>Sử dụng cùng một tên biến cho biến ở trong và ngoài một scope nào đó. Ví dụ</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let user = authenticateUser();</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">render</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  let user = anotherValue();</span><br><span class="line">  ...</span><br><span class="line">  ... <span class="comment">//many lines...</span></span><br><span class="line">  ...</span><br><span class="line">  ... <span class="comment">// &lt;-- a programmer wants to work with user here and...</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Môn sinh trẻ tuổi đang làm việc với đoạn code bên trong function render sẽ không thể nhận ra có một biến local khác cùng tên <code>user</code> mới thực sự là biến đang được sử dụng. Anh ta vẫn đang tưởng mình đang sử dụng biến user là kết quả của <code>authenticateUser()</code>...!!! Ok happy debugging :))</p><h2 id="side-effects-everywhere">Side-effects everywhere!!!</h2><p>Có những chức năng giống như chúng <strong>không thay đổi gì cả</strong>. Những function với cái tên như <code>isReady()</code>, <code>checkPermission()</code>, <code>findTags()</code>,... Chúng được giả định để thực hiện các phép tính, tìm và trả về dữ liệu mà <strong>không thay đổi bất kỳ thứ gì bên ngoài chúng</strong>. Nói cách khác, chúng không có <strong>&quot;side effect&quot;</strong>.</p><ul><li>Một ninja đắc đạo biết cách <strong>thêm vào chúng những chức năng hữu ích</strong> để hỗ trợ đồng đội.</li></ul><p>Biểu hiện của sự ngạc nhiên trên khuôn mặt đồng nghiệp của bạn khi anh ta thấy một chức năng có tên là <code>check...</code> hoặc <code>find...</code> thay đổi một cái gì đó - chắc chắn sẽ là lý do anh ấy rời xa bạn hơn :)).</p><ul><li>Một cách khác để gây ngạc nhiên cho anh bạn đồng nghiệp là <strong>trả lại kết quả không chuẩn</strong>.</li></ul><p>Với cách suy nghĩ còn non nớt chưa qua rèn rũa của một môn sinh, <code>checkPermission()</code> hẳn là một thứ gì đó mà sẽ trả về <code>true/false</code>, nhưng là một ninja có trách nhiệm, bạn nên trả về nhiều hơn để giúp anh ta, hãy trả về cho anh ấy một object.</p><p>Cho đến khi môn sinh trẻ tuổi kia viết những thứ đại loại như <code>if(checkPermission(...))</code>, anh ta sẽ tự hỏi tại sao nó không hoạt động. Nói với anh ấy: “Đọc tài liệu đi!!!”. Và <strong>đưa cho anh ấy bài viết này</strong>.</p><h2 id="powerful-functions">Powerful functions!</h2><blockquote><p>The great Tao flows everywhere, both to the left and to the right.</p><p><cite>Laozi (Tao Te Ching)</cite></p></blockquote><p>Đừng giới hạn chức năng function của bạn chỉ bởi vì cái tên của nó. Hãy để cho nó làm được nhiều hơn thế.</p><p>Ví dụ như function <code>validateEmail(email)</code> bên cạnh việc kiểm tra tính đúng đắn của email, nó nên xuất ra thông báo về lỗi đó và gửi yêu cầu để người dùng gửi lại email chẳng hạn. Không gì tốt hơn việc <strong>chỉ gọi một function và bạn đã có mọi thứ bạn muốn</strong> :)).</p><p>Những ninja giỏi biết cách giấu hàng tá logic vào trong code của họ, để không ai có thể đánh cắp chúng từ bên ngoài.</p><p><img src="https://media.giphy.com/media/12NUbkX6p4xOO4/giphy.gif"></p><p><strong>Kết hợp nhiều logic vào trong cùng một chỗ giúp bảo vệ code của bạn khỏi nguy cơ bị tái sử dụng.</strong></p><p>Tưởng tượng một thằng ngốc nào đó trong team muốn sử dụng code của một ninja như bạn, ví dụ như hàm <code>validateEmail(email)</code> bên trên. Sau vài giờ thiền định và nhận ra function bạn viết làm được còn nhiều hơn cả những gì một gã ngốc như anh ta mong đợi (kiểm tra tính đúng đắn của email), nghiễm nhiên, anh ta sẽ bỏ cuộc và không có ý định làm phiền đến khoảng thời gian thiền định của bạn nữa.</p><h1 id="tldr">TL;DR</h1><p>Tất cả những <strong>code lý</strong> trong <strong>code đạo</strong> của ninja đạo kể trên đều từ source code có thật...Nhiều khi nó được viết bởi những developer nhiều năm kinh nghiệm, có lẽ có thể còn nhiều hơn cả bạn ;).</p><ul><li>Tuân theo <strong>một vài đạo lý</strong> trong số này, code của bạn sẽ tràn đầy sự bất ngờ.</li><li>Tuân theo <strong>phần lớn đạo lý</strong> trong số này, code của bạn sẽ thực sự là của bạn, không ai muốn sửa hay động đến nó.</li><li>Tuân theo <strong>tất cả những đạo lý</strong> này, code của bạn sẽ trở thành một bài học có giá trị cho các môn sinh trẻ tìm kiếm sự giác ngộ.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nếu coding giống như một trận chiến giữa programer và problem cần giải quyết thì, giống như những chiến binh thực thự, chúng ta tìm kiếm đạo (phương pháp chiến đấu) phù hợp cho chính mình. Trong bạt ngàn những đạo (những nguyên lý), kinh dịch (article trên blog của những blogger nổi tiếng), chú thích kinh nghiệm (những note, post được đông đảo dev &lt;code&gt;kip&lt;/code&gt; lại),...đâu đó quanh đây vẫn tồn tại một đạo mà không mấy ai để ý đến nhưng số người theo thì đếm không kể hết. Có người đắc đạo hoàn toàn, có người một phần, tuy theo nhiều mức độ khác nhau nhưng tựu chung có thể coi đều là đồng đạo trong môn phái này :))&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://fromnoobstogeeks.com/tags/javascript/"/>
    
      <category term="code" scheme="https://fromnoobstogeeks.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Injection in a nutshell</title>
    <link href="https://fromnoobstogeeks.com/2018/05/21/dependency-injection/"/>
    <id>https://fromnoobstogeeks.com/2018/05/21/dependency-injection/</id>
    <published>2018-05-21T13:13:40.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>As a developer, we write code day by day, try to handle many things, put all the thing in the right way it should be. Almost of our time is spent to googling usage of libraries (or frameworks), try to handle some incredible bugs or try to maintain some shitty things from other guys you may never ever met. All this mess made us forget about something that really have a meaning, it made us forget that our job is not just try to handle all the things, but our job is focused on <code>creating the new thing depend on another guy achievement</code>. But the reason why we are so confused lies in our purpose. Just like the picture below, sometime you realize yourself that you are just a noob and trying to handle all that mess - the mess named dependencies.</p><a id="more"></a><p><img src="https://i.imgur.com/U1ahhBd.jpg"></p><p>Almost of us know about the SOLID principle, some of us understood and rare of us think about it while we write down our code (I'm not on this group T.T). We all pay our attention on something like design pattern and think about it as the easiest way to know how good your code are, but if we focus on that think too much, the thing we created will become more messed than you think (in the case you can finish what you started).</p><p>Our life will get easier if we put our attention on the right way it should be! Good code mean easier to maintain &amp; easier to <code>read</code>, so if you want to make it easier to read, just break it into pieces. But when we have a heap of piece, create application logic like put them together and this makes them dependent on each other.</p><p>For example, in the below code block, we call <code>Car</code> class depends on <code>Engine</code> class.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">    Engine Engine <span class="comment">// the car has an engine</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This pattern appears so many times in our application. Everything seems to be okay, but when we start writing logic of <code>Car</code> class that have relation with <code>Engine of the Car</code>, all the change on <code>Engine</code> class can make <code>Car</code> class logic be broken. The same thing when we use external libraries, if your application depends directly on the external modules, it will be corrupted when those libraries are updated.</p><p>To avoid that dead end, we have a very useful tool named <code>Dependencies Injection</code>. Instead of directly injecting class to class, it's better to inject just the interface of injecting class to the host class (we have many ways to do this strategy).</p><h2 id="dependencies-injection-in-sample">Dependencies Injection in sample</h2><p>with <code>IEngine</code> is an interface of engine, <code>Car</code> is car class that use <code>IEngine</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IEngine <span class="keyword">interface</span> &#123;</span><br><span class="line">    Start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="contructor-injection">Contructor Injection</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// public prop</span></span><br><span class="line">    Engine IEngine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Car Contructor</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCar</span><span class="params">(engine IEngine)</span> *<span class="title">Car</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Car&#123;</span><br><span class="line">        Engine: engine</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">runByRiceEngine := NewRunByRiceEngine() <span class="comment">// implemented IEngine interface</span></span><br><span class="line">car := NewCar(runByRiceEngine)</span><br></pre></td></tr></table></figure><h3 id="property-injection">Property Injection</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// private prop</span></span><br><span class="line">    engine IEngine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setter</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Car)</span> <span class="title">SetEngine</span><span class="params">(engine IEngine)</span></span> &#123;</span><br><span class="line">    c.engine = engine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">runByRiceEngine := NewRunByRiceEngine() <span class="comment">// implemented IEngine interface</span></span><br><span class="line">car := Car()</span><br><span class="line">car.SetEngine(runByRiceEngine)</span><br></pre></td></tr></table></figure><h3 id="interface-injection">Interface Injection</h3><p>In some opinion, they think that it's better if the way we inject class into another class is an interface itself. This implementation familiar with property injection, but the inject method isn't setter method. The object class we inject into itself implements the injectable forms on it.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IEngineMountable <span class="keyword">interface</span> &#123;</span><br><span class="line">    Mount(engine IEngine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// private prop</span></span><br><span class="line">    engine IEngine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implement IEngineMountable</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Car)</span> <span class="title">Mount</span><span class="params">(engine IEngine)</span></span> &#123;</span><br><span class="line">    c.engine = engine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">runByRiceEngine := NewRunByRiceEngine() <span class="comment">// implemented IEngine interface</span></span><br><span class="line">car := Car()</span><br><span class="line">car.Mount(runByRiceEngine)</span><br></pre></td></tr></table></figure><h2 id="dependencies-injection-and-composition-root">Dependencies Injection and Composition Root</h2><p>There is some where in your application, they call its <a href="http://blog.ploeh.dk/2011/07/28/CompositionRoot/" target="_blank" rel="noopener">Composition Root</a>.</p><blockquote><p>A Composition Root is a (preferably) unique location in an application where modules are composed together.</p></blockquote><p>It as close as possible to the application's entry point. In there, all of the object we declared through the application will be instanced and be composed together and act the application logic we wrote.</p><p>In console application, it should be placed at <code>main</code>. But on another way, it's better to make the <code>main</code> method as lightweight as possible, so we can give that mission to another guy. The below sample, we going to give this mission to the guy name <code>DI Container</code>.</p><h3 id="injection-with-di-container">Injection with DI Container</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Builder <span class="function"><span class="keyword">func</span><span class="params">(con *Container)</span> <span class="title">interface</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// definition class</span></span><br><span class="line"><span class="keyword">type</span> Definition <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Builder Builder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DI Container class</span></span><br><span class="line"><span class="keyword">type</span> Container <span class="keyword">struct</span> &#123;</span><br><span class="line">    store <span class="keyword">map</span>[<span class="keyword">string</span>]Builder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewContainer</span><span class="params">()</span> *<span class="title">Container</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Container&#123;</span><br><span class="line">        store: <span class="keyword">map</span>[<span class="keyword">string</span>]Builder&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DI Container method: register the object creation method</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Container)</span> <span class="title">Register</span><span class="params">(d *Definition)</span></span> &#123;</span><br><span class="line">    c.store[d.Name] = d.Builder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DI Container method: get object from container</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Container)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    builder, _ := c.store[key]</span><br><span class="line">    instance = builder(c)</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line">container := NewContainer()</span><br><span class="line">rd := &amp;Definition&#123;</span><br><span class="line">    Name: <span class="string">"RunByRiceEngine"</span>,</span><br><span class="line">    Builder: <span class="function"><span class="keyword">func</span><span class="params">(con *Container)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">        <span class="keyword">return</span> NewRunByRiceEngine()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">container.Register(rd)</span><br><span class="line"></span><br><span class="line">sd := &amp;Definition&#123;</span><br><span class="line">    Name: <span class="string">"CarWithRunByRiceEngine"</span>,</span><br><span class="line">    Builder: <span class="function"><span class="keyword">func</span><span class="params">(con *Container)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">        engine := con.Get(<span class="string">"RunByRiceEngine"</span>).(IEngine)</span><br><span class="line">        <span class="comment">// inject by the way you want! In this case, it's constructor injection</span></span><br><span class="line">        <span class="keyword">return</span> NewCar(engine)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">container.Register(sd)</span><br><span class="line"></span><br><span class="line">... <span class="comment">// in main</span></span><br><span class="line">car := container.Get(<span class="string">"CarWithRunByRiceEngine"</span>)</span><br></pre></td></tr></table></figure><p>We can make container store more than just the way to create new objects. For example we can use DI Container for storing object itself (something like Singleton Pattern implemented inside the container), sample code for this go <a href="https://gist.github.com/khanhtc1202/88411fb3e33f7dd4c5e0b11618b87016" target="_blank" rel="noopener">here</a>.</p><p>to be continue...</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As a developer, we write code day by day, try to handle many things, put all the thing in the right way it should be. Almost of our time is spent to googling usage of libraries (or frameworks), try to handle some incredible bugs or try to maintain some shitty things from other guys you may never ever met. All this mess made us forget about something that really have a meaning, it made us forget that our job is not just try to handle all the things, but our job is focused on &lt;code&gt;creating the new thing depend on another guy achievement&lt;/code&gt;. But the reason why we are so confused lies in our purpose. Just like the picture below, sometime you realize yourself that you are just a noob and trying to handle all that mess - the mess named dependencies.&lt;/p&gt;
    
    </summary>
    
    
      <category term="architecture" scheme="https://fromnoobstogeeks.com/tags/architecture/"/>
    
      <category term="design" scheme="https://fromnoobstogeeks.com/tags/design/"/>
    
      <category term="golang" scheme="https://fromnoobstogeeks.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>A Sample App for Flux Architecture</title>
    <link href="https://fromnoobstogeeks.com/2018/04/15/flux-arch/"/>
    <id>https://fromnoobstogeeks.com/2018/04/15/flux-arch/</id>
    <published>2018-04-15T20:20:57.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>Mình được tuyển về làm java dev nhưng do số nhọ, từ khi đi làm đến giờ số ngày dev java của mình chắc ít hơn đầu ngón tay. Bị quăng qua lại làm từ python, ruby, clojure, golang,...đến giờ thì cái gì đến cũng phải đến, mình bị dí sang làm react trong một dự án mới. Mình vốn cực kì noob frontend app, nên khi nhận được cụm <code>flux architecture</code> trong một buổi họp nọ, mình nhận ra ngay đấy là cứu cánh duy nhất của mình ( ngoài architecture ra thì mình không đặc biệt quan tâm cái gì lắm :)) ). Sau vài giờ google thì dù tìm lòi mắt mình cũng <code>không thấy cái sample nào tử tế hoặc đủ để noobs như mình hiểu</code> nên quyết định tự làm 1 cái, dù sao thì từ hướng architecture, flux cũng khá là thú vị.</p><a id="more"></a><p>Như tiêu đề, bài viết không có mục đích viết lại flux là gì, chỉ đơn giản là cung cấp source code một sample app thiết kế theo flux ( sử dụng react-redux ) cùng với một số note cá nhân rút ra được. Nếu không có đủ thời gian để tiêu phí, source code được public tại <a href="https://github.com/khanhtc1202/flux-arch-sample" target="_blank" rel="noopener">đây</a>.</p><h2 id="khái-quát-về-flux">Khái quát về flux</h2><p>Cái này thì mình thấy trên mạng sau vài phút googling thì có rất nhiều rồi, ví dụ như ở <a href="https://scotch.io/tutorials/creating-a-simple-shopping-cart-with-react-js-and-flux" target="_blank" rel="noopener">đây</a>, <a href="https://viblo.asia/p/flux-under-the-hood-NznmMd34Rr69" target="_blank" rel="noopener">đây</a> và cả ở <a href="https://blog.mimacom.com/introduction-to-react-and-flux/" target="_blank" rel="noopener">đây</a> nữa. Phần này khá nhiều bài và đầy đủ rồi, mình xin phép tập trung vào implement và lưu note :))</p><p>Ngoài những bài bên trên ra mình thấy có 1 bài dịch trên kipalog khá hay về flux, có thể tìm thấy tại <a href="https://kipalog.com/posts/Huong-dan-va-giai-thich-Flux-bang-hinh-ve" target="_blank" rel="noopener">đây</a>.</p><p>Cập nhật thêm một bài so sánh về flux architecture vs mvc architecture mình cảm thấy rất hữu ích tại <a href="http://jonnyreeves.co.uk/2016/redux-middleware/" target="_blank" rel="noopener">đây</a>.</p><p><img src="https://media.giphy.com/media/yvAqpqJoPRvYMOVz5l/giphy.gif"></p><h2 id="implement-flux">Implement Flux</h2><p>Chúng ta đi implement một sample app bao gồm 1 search box nhập từ khoá, kết quả tìm được in lên trang như sau. ( mình noob application nên nó chỉ <code>đẹp</code> được đến vậy là hết sức rồi :)) )</p><p><img src="https://media.giphy.com/media/RkN5nA5O00StGGwXVQ/giphy.gif"></p><p>Một vài điểm chú ý mình muốn nhắc lại trước khi bắt tay vào design</p><ol type="1"><li>View là tập hợp của các components!!! Component nên tập trung vào chức năng, không nên tập trung vào giao diện.</li><li>Các component được define tuỳ ý bạn, tuy nhiên tuyệt đối không nên define 1 component lớn nhiều logic ( nếu lo lắng về việc view bị vụn nhiều component thì đọc 3. )</li><li>Dữ liệu của cả trang define thông qua State của trang đó. Sau mỗi action, State của trang được cập nhật đến trạng thái mới ( điều này đảm bảo view đồng nhất tránh bị thay đổi do trigger ở nhiều model khác nhau | lưu ý tránh nhầm lẫn với State của component )</li><li>Chỉ có các Action nắm biết cách thay đổi dữ liệu trên view, không được thay đổi bằng bất cứ phương pháp nào khác, kết quả sau mỗi action đều là State mới của trang ( điều này bổ sung cho 3. )</li></ol><p>Xem hình dưới để có hình dung tổng quát của cấu trúc khi đảm bảo những chú ý trên:</p><p><img src="https://i.imgur.com/om44nEa.png"></p><p>Dựa theo tư tưởng bên trên, ta thiết kế một project structure như sau:</p><ul><li><p>Các <code>Component</code> phát sinh event, được xử lý bằng các method ( đã được khai báo như là props (properties) của component ).</p></li><li><p>Các <code>Action</code> ( có vai trò như các callback ) định nghĩa phương thức thay đổi dữ liệu trên trang, kết quả trả về là state mới.</p></li><li><p>Các <code>Container</code> có 2 nhiện vụ chính là: <code>Bind data từ State của trang sang props của Component</code> và <code>Tuỳ theo method đã declare trong props của Component, ném (dispatch) các Action thích hợp</code>. Nhiệm vụ này thực hiện thông qua 2 method chính là <code>mapStateToProps</code> và <code>mapDispatchToProps</code>.</p></li><li><p>Các <code>Reducer</code> là nơi kiểm soát giá trị <code>input cho State mới</code>. Method <code>combineReducers</code> merge output của các reducer gán làm giá trị mới cho State.</p></li><li><p><code>state.js</code> define State struct của page app &amp; <code>store.js</code> là nơi gom đống reducers bên trên lại, quản lý State của toàn bộ page đó.</p></li></ul><blockquote><p>Những điều trên được đảm bảo bởi <code>redux</code> và các method của libs này. Trong ví dụ minh hoạ mình dùng libs <code>react-redux</code> để implement.</p></blockquote><p>Project's struct</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.src</span><br><span class="line">├── actions/</span><br><span class="line">├── components/</span><br><span class="line">├── containers/</span><br><span class="line">├── reducers/</span><br><span class="line">├── index.tsx</span><br><span class="line">├── state.ts</span><br><span class="line">└── store.ts</span><br></pre></td></tr></table></figure><p>Ngoài ra thì có thể chia thêm <code>types/</code> để define types hoặc action sử dụng.</p><p>OK bắt tay vào viết chắc nhanh ngấm hơn :))</p><p>Để implement sample app này mình chia nó ra thành 2 components là: <code>SearchBox</code> và <code>SearchResults</code> tương ứng như sau:</p><ol type="1"><li>Component: SearchBox | Action: Type, Search | StoreToState: queryString, queryResults</li><li>Component: SearchResults | Action: non ! StoreToState: non :))) ( thằng ku này chỉ bind data từ state và show ra thôi :)) )</li></ol><p>Lý do mình chia ra như bên trên thành 2 component đơn giản chỉ là mình <code>thích</code> như vậy :)) hơn nữa, do kiến trúc đã flex nên việc define thêm bớt các component rất dễ dàng, miễn là đảm bảo đúng các chú ý đã nêu bên trên :)))</p><p>Ta có trình tự implement.</p><p><img src="https://i.imgur.com/Hw7PGiw.jpg?1"></p><h3 id="define-state">Define state</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> State = &#123;</span><br><span class="line">  queryString: <span class="built_in">string</span>;</span><br><span class="line">  results: <span class="built_in">Array</span>&lt;Result&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="implement-component">Implement component</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Props = &#123;</span><br><span class="line">    queryString: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">type</span>: <span class="function">(<span class="params">text: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    search: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> SearchBox <span class="keyword">extends</span> React.Component&lt;Props, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">props: Props</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="implement-action">Implement action</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> SearchAction = &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"SEARCH"</span>;</span><br><span class="line">    results: <span class="built_in">Array</span>&lt;Result&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> search = (): <span class="function"><span class="params">SearchAction</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// TODO do http request for query results from api here</span></span><br><span class="line">    <span class="keyword">const</span> results: <span class="built_in">Array</span>&lt;Result&gt; = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">"SEARCH"</span>,</span><br><span class="line">        results: results</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Chú ý 1 Action bắt buộc có trường type như sau ( lý do thì ở <a href="https://fromnoobstogeeks.com/2018/04/15/flux-arch/#Implement-reducer">đây</a> ) <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SearchAction = &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"SEARCH"</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="implement-container">Implement container</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DispatchProps = &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="function">(<span class="params">text: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    search: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps: MapStateToProps&lt;<span class="built_in">any</span>, <span class="built_in">any</span>, State&gt; = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> queryString = state.queryString;</span><br><span class="line">    <span class="keyword">return</span> &#123; queryString &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps: MapDispatchToProps&lt;DispatchProps, <span class="built_in">any</span>&gt; = (</span><br><span class="line">    dispatch: Dispatch&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="function">(<span class="params">text: <span class="built_in">string</span></span>) =&gt;</span> &#123; dispatch(<span class="keyword">type</span>(text)); &#125;,</span><br><span class="line">        search: <span class="function"><span class="params">()</span> =&gt;</span> &#123; dispatch(search()); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(SearchBox);</span><br></pre></td></tr></table></figure><p><code>State</code> bên trên là state của page app.</p><p><code>queryString</code> props của <code>component SearchBox</code> được map với <code>queryString</code> strong <code>State</code>.</p><p><code>type</code> và <code>search</code> props của <code>component SearchBox</code> được <code>trigger để dispatch action</code> phù hợp.</p><h3 id="implement-reducer">Implement reducer</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState: <span class="built_in">Array</span>&lt;Result&gt; = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state: <span class="built_in">Array</span>&lt;Result&gt; = initialState, action: SearchAction): <span class="built_in">Array</span>&lt;Result&gt; =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"SEARCH"</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> action.results</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Chú ý <code>action.type</code> đã define bên trên được dùng ở đây.</p><p>Giá trị trả về của các reducer được merge lại tại <code>reducer/index.js</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">    queryString: Type,</span><br><span class="line">    results: Search,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Chú ý State struct được map với kết quả trả về của <code>combieReducers</code>.</p><h3 id="store-và-index.tsx">Store và Index.tsx</h3><p>./store.ts <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createLogger &#125; <span class="keyword">from</span> <span class="string">'redux-logger'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">"./reducers"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducers,</span><br><span class="line">  applyMiddleware(createLogger())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure></p><p>./index.tsx <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span>;</span><br><span class="line"><span class="keyword">import</span> SearchBox <span class="keyword">from</span> <span class="string">"./containers/SearchBox"</span>;</span><br><span class="line"><span class="keyword">import</span> SearchResults <span class="keyword">from</span> <span class="string">"./containers/SearchResults"</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;SearchBox/&gt;</span><br><span class="line">        &lt;SearchResults/&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Provider&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>Chú ý module được import vào tại đây là <code>containers</code> và <code>store</code>.</p><p>Về <code>Provider</code> có thể tìm thấy giải thích chi tiết tại <a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store" target="_blank" rel="noopener">đây</a> hoặc một câu hỏi khá hay để hiểu thêm về provider có thể tìm thấy tại <a href="https://github.com/reactjs/react-redux/issues/719" target="_blank" rel="noopener">đây</a>.</p><p>Ok DONE! Mục tiêu lúc đầu do cay cú vì không tìm được cái sample nào chi tiết cho flux nên mình viết bài này với mode noobs như mình đọc xong cũng làm được :)). Nhưng nghĩ lại thì tut với sample thì vẫn chỉ là sample thôi, muốn hiểu thì cứ clone về nghịch là nhanh nhất :))</p><p>P/s: - Project struct trên là thành quả 2 ngày cãi nhau với thanh niên ngồi cạnh mình ở công ty, thanks to him :)) - Sếp :v anh có vô tình đọc được cái đống này thì xin tha cho em, chỉ làm frontend app nốt tháng này không em xin quit sớm :'( .</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mình được tuyển về làm java dev nhưng do số nhọ, từ khi đi làm đến giờ số ngày dev java của mình chắc ít hơn đầu ngón tay. Bị quăng qua lại làm từ python, ruby, clojure, golang,...đến giờ thì cái gì đến cũng phải đến, mình bị dí sang làm react trong một dự án mới. Mình vốn cực kì noob frontend app, nên khi nhận được cụm &lt;code&gt;flux architecture&lt;/code&gt; trong một buổi họp nọ, mình nhận ra ngay đấy là cứu cánh duy nhất của mình ( ngoài architecture ra thì mình không đặc biệt quan tâm cái gì lắm :)) ). Sau vài giờ google thì dù tìm lòi mắt mình cũng &lt;code&gt;không thấy cái sample nào tử tế hoặc đủ để noobs như mình hiểu&lt;/code&gt; nên quyết định tự làm 1 cái, dù sao thì từ hướng architecture, flux cũng khá là thú vị.&lt;/p&gt;
    
    </summary>
    
    
      <category term="architecture" scheme="https://fromnoobstogeeks.com/tags/architecture/"/>
    
      <category term="react" scheme="https://fromnoobstogeeks.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Log Viewer via HTTP</title>
    <link href="https://fromnoobstogeeks.com/2018/03/30/view-log/"/>
    <id>https://fromnoobstogeeks.com/2018/03/30/view-log/</id>
    <published>2018-03-30T17:17:44.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>Nhân một cuối tuần rảnh rỗi cao hứng nào đấy, mình đã build một hệ thống nhỏ - mục đích chính để nó giúp mình <code>clone tự động anime mới</code> từ các trang mình đã thu thập rss (phần vì mình lười down từng tập, phần do đợt này mình hay quên nên @@).</p><p>Do là cái hệ thống viết chơi bời trong 2 ngày nghỉ nên nó thiếu đủ thứ m(- -)m... Lúc đầu, mình chỉ tập trung vào viết cho nó chạy, nhưng thời gian đầu - do một số lý do khó nói - mà nó chết sập liên tục @@ mình bắt đầu nghĩ đến logging, tất nhiên là log ra file thôi...Sau đấy một thời gian khi đã chạy khá ổn định, dần dần bản thân việc <code>mò vào server để mở file log ra đọc</code> mình cũng lười nốt m(- -)m nên bắt đầu nghĩ xem có cách nào đơn giản (không phải cài hay dùng thêm dịch vụ ngoài nào) mà có thể giúp xem luôn log file ở server từ trình duyệt không :))</p><a id="more"></a><p>Ý tưởng giải quyết vấn đề của mình như sau: Nếu có thể serve text data trong log file như data thông thường và gửi chúng trong response trả về thì vấn đề cần giải quyết chỉ là <code>làm cách nào để lấy được log data dưới dạng stream và dán nó lên stream data của response</code> - giải quyết được vấn đề này thì có thể đọc log qua http thông qua 1 request đơn giản lên server rồi. (Lý do phải đọc log data từ log file dưới dạng stream là do log file lớn đọc trong 1 lần thì tốn ram quá, nhất là với cái server dùng ké của mình @@)</p><p>Từ đó mình nghĩ các bước thực hiện như sau (do mình đã viết xong khung cho hệ thống từ trước nên bước viết endpoint mới là dễ dàng thực hiện và không được list ra ở đây): 1. Tìm cách đọc stream data từ log file (ở đây mình nghĩ ngay đến <code>tail</code> :)) ) 2. Tìm cách gọi được stream đó từ source code ( server của hệ thống mình viết bằng nodejs ) 3. Gắn stream data đọc được lên stream data của response trả về. 4. DONE!!!</p><p>Bắt tay vào làm nào :))</p><p>Trong nodejs, để sử dụng các linux command, cách đơn giản nhất là sử dụng thư viện <a href="https://nodejs.org/api/child_process.html" target="_blank" rel="noopener">child_process</a>, về cơ bản khi dùng method <code>spawn()</code> của thư viện này, 1 process mới được sinh ra và gán cho <code>&lt;ChildProcess&gt; object</code> thực hiện command và trả về kết quả bạn có thể gọi được thông qua property <code>.stdout</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line">...</span><br><span class="line">obj.show = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">'Content-Type'</span>,<span class="string">'text/html;charset=utf-8'</span>);</span><br><span class="line">    <span class="keyword">var</span> tail = spawn(<span class="string">'tail'</span>, [<span class="string">'-f'</span>, config.app.logPath]);</span><br><span class="line">    <span class="built_in">console</span>.log(tail.stdout);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>kết quả thu được</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[nodemon] starting `node app.js`</span><br><span class="line">Loaded: <span class="built_in">log</span> controller.</span><br><span class="line">Loaded: monitor controller.</span><br><span class="line">Loaded: streamer controller.</span><br><span class="line">Loaded: videos controller.</span><br><span class="line">Server running on 127.0.0.1: 3000</span><br><span class="line">Loaded file [Fuyu] Citrus - 12 [720p].mkv ready to view!</span><br><span class="line">Loaded file [Fuyu] Hakumei to Mikochi - 11 [720p].mkv ready to view!</span><br><span class="line">Loaded file [Fuyu] Killing Bites - 11 [720p].mkv ready to view!</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Có vẻ đã get stream thành công :)) giờ gán nó cho data stream của response là xong :)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line">...</span><br><span class="line">obj.show = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">'Content-Type'</span>,<span class="string">'text/html;charset=utf-8'</span>);</span><br><span class="line">    <span class="keyword">var</span> tail = spawn(<span class="string">'tail'</span>, [<span class="string">'-f'</span>, config.app.logPath]);</span><br><span class="line">    tail.stdout.pipe(res);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Ở đây mình dùng <code>pipe()</code> để stream đọc được đang ở <code>stdout</code> của process sinh ra bởi spawn() được viết thẳng sang cho res (socket) :)) chắc cũng không hẳn là socket nhưng theo ý hiểu ở đây có thể coi nó gần giống như vậy :D lý do vì</p><p><img src="https://i.imgur.com/LucItFe.png?1"></p><p>Như đã thấy trong hình trên, stream data của response chưa bắt được event end :)) lý do vì stdout của process đang chạy lệnh tail vẫn chưa hoàn thành (vì nó là tail mà :) ). Như vậy nếu bây giờ mình viết thêm gì đấy vào file log thì trên trình duyệt, nội dung của tab log mình đang xem cũng thay đổi luôn - quá tuyệt :)) thử nào...</p><p><a href="https://youtu.be/41XIFcZKfEU" target="_blank" rel="noopener"><img src="https://media.giphy.com/media/cm1SRZW8XOEGFZNy8V/giphy.gif"></a></p><p>Done!!! :)))) vậy là đã hoàn thành việc view log thông qua http, lại còn realtime nữa chứ :))))...</p><p>Nhưng có gì đấy không đúng ở đây @@ Nếu như mình ngắt kết nối đến server (tắt cái tab đang nhận log ở trình duyệt) thì sẽ thế nào với cái process get log stream :v Nghĩ thế nên mình lại vào server check lại và...</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep tail</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root     12951  0.0  0.0   4408   248 pts/3    S+   07:55   0:00 tail -f logs/run.log</span><br><span class="line">root     12961  0.0  0.0   4408   248 pts/3    S+   07:59   0:00 tail -f logs/run.log</span><br><span class="line">root     12971  0.0  0.0   4408   248 pts/3    S+   08:05   0:00 tail -f logs/run.log</span><br></pre></td></tr></table></figure><p>Không ổn!!! Thế này đọc log 100 lần thì có cả trăm cái process chạy tail nó lưu lại ở server, nghĩ đến thôi đã thấy rùng mình @@.</p><p>Hiện trạng của cái log view như sau:</p><p><img src="https://i.imgur.com/vJbERcj.jpg"></p><p>Vấn đề hiện tại sẽ được giải quyết nếu bắt được trạng thái data stream của response bị terminated! Và rất may đây là nodejs :)) chẳng có gì ngoài event, do vậy vấn đề sẽ được giải quyết dễ dàng khi sửa đoạn code gán stream data như sau.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line">...</span><br><span class="line">obj.show = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">'Content-Type'</span>,<span class="string">'text/html;charset=utf-8'</span>);</span><br><span class="line">    <span class="keyword">var</span> tail = spawn(<span class="string">'tail'</span>, [<span class="string">'-f'</span>, config.app.logPath]);</span><br><span class="line">    res.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Response ended"</span>);</span><br><span class="line">        tail.kill(<span class="string">"SIGINT"</span>);</span><br><span class="line">    &#125;).on(<span class="string">'finish'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Response finished successfully"</span>);</span><br><span class="line">        tail.kill(<span class="string">"SIGINT"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    tail.stdout.pipe(res);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Ở đây <code>'close'</code> là event sẽ được bắt khi response connection bị ngắt đột ngột và <code>'finish'</code> là event hit khi response connection bị đóng vì lý do tự nhiên (timeout của trình duyệt chẳng hạn). Khi bắt được event này, chỉ cần <code>kill</code> process đang chạy lệnh tail là xong (giống như lệnh kill trong linux thông thường).</p><p>Ok giờ thử lại nào! Đây là trạng thái của server khi có request đọc log đến.</p><p><img src="https://i.imgur.com/oxoyhf4.png"></p><p>Và giờ thì thử ngắt nó đi :))))</p><p><img src="https://i.imgur.com/pkxmpfI.png"></p><p>DONE!!!! Lần này thì có vẻ không còn vấn đề nào nữa :))) Định lười nhưng cuối cùng thành ra khá lòng vòng mới có thể giải quyết hết vấn đề @@ Nên nếu có cần đưa ra kết luận gì đó thì sẽ là đừng lười như mình, kết quả không tốt đẹp gì đâu :)))</p><p>P/S:</p><p>Repo source code của hệ thống clone anime cho bạn nào quan tâm:</p><p>https://github.com/khanhtc1202/animu-crawling-system</p><p>Bạn nào ngại cài lại thì down chung từ server của mình cũng được :)))</p><p>Nhân đây mình còn rất nhiều cuối tuần rảnh rỗi @@ còn hứng thì lúc nào cũng có :)) bạn nào có ý tưởng gì hay sẵn sàng chia sẻ thì mình xin một chân ngồi hóng nhé :))).</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nhân một cuối tuần rảnh rỗi cao hứng nào đấy, mình đã build một hệ thống nhỏ - mục đích chính để nó giúp mình &lt;code&gt;clone tự động anime mới&lt;/code&gt; từ các trang mình đã thu thập rss (phần vì mình lười down từng tập, phần do đợt này mình hay quên nên @@).&lt;/p&gt;
&lt;p&gt;Do là cái hệ thống viết chơi bời trong 2 ngày nghỉ nên nó thiếu đủ thứ m(- -)m... Lúc đầu, mình chỉ tập trung vào viết cho nó chạy, nhưng thời gian đầu - do một số lý do khó nói - mà nó chết sập liên tục @@ mình bắt đầu nghĩ đến logging, tất nhiên là log ra file thôi...Sau đấy một thời gian khi đã chạy khá ổn định, dần dần bản thân việc &lt;code&gt;mò vào server để mở file log ra đọc&lt;/code&gt; mình cũng lười nốt m(- -)m nên bắt đầu nghĩ xem có cách nào đơn giản (không phải cài hay dùng thêm dịch vụ ngoài nào) mà có thể giúp xem luôn log file ở server từ trình duyệt không :))&lt;/p&gt;
    
    </summary>
    
    
      <category term="manual" scheme="https://fromnoobstogeeks.com/tags/manual/"/>
    
      <category term="networks" scheme="https://fromnoobstogeeks.com/tags/networks/"/>
    
      <category term="nodejs" scheme="https://fromnoobstogeeks.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Compile C program in manual way</title>
    <link href="https://fromnoobstogeeks.com/2018/03/26/compile-c-source/"/>
    <id>https://fromnoobstogeeks.com/2018/03/26/compile-c-source/</id>
    <published>2018-03-26T01:09:47.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>After hard coding your program hour by hour (sometime, it becomes year by year :) ), one of the most uncomfortable time is compiling it into executable file. As usually, we are going to compile a program by the hardest way to do it, just because it will make us knows that in some case, <code>gcc</code> is really a hero :))</p><p>The post's content is about compiling a C program by manual way. In that program, we use an external lib, defined by yourself.</p><a id="more"></a><h2 id="using-static-libraries">Using static libraries</h2><p>Create new static library as following steps:</p><ol type="1"><li>Create new header file <code>.h</code> (where we declare functions).</li><li>Create new source file <code>.c</code> (where we define functions, the name of source file and header file has no relation convention, but it's better if they have the same name).</li><li><p>Compile lib to binary file <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -c lib_mylib.c -o lib_mylib.o</span><br></pre></td></tr></table></figure></p></li><li><p>Create static library <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ar rcs lib_mylib.a lib_mylib.o</span><br></pre></td></tr></table></figure></p></li><li><p>Using this compiled static lib in another C source code by using <code>#include</code>. More about compile go <a href="#manual-compile-c-source-file">here</a>.</p></li></ol><p>Note: the name of static libary follows this name convention: <code>lib_namegohere.a</code></p><h2 id="using-dynamic-libraries">Using dynamic libraries</h2><p>Dynamic Linking doesn’t require the code to be copied, it is done by just placing name of the library in the binary file. The actual linking happens when the program is run, when both the binary file and the library are in memory. Examples of Dynamic libraries (libraries which are linked at run-time) are, <code>.so</code> in Linux and <code>.dll</code> in Windows.</p><h2 id="manual-compile-c-source-file">Manual compile C source file</h2><p>Compile a program written by C follows the 4 steps:</p><ol type="1"><li>Preprocessing</li><li>Assembly Code Compiling</li><li>Machine Code Compiling</li><li>Linking</li></ol><p>As usually we run <code>gcc source.c -o exec-bin-file</code> to compile the C program. It makes the result of 3 steps above come unseen, we can run this step by step as below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -E source.c -o source.i</span><br><span class="line">$ gcc -S source.i -o source.s</span><br><span class="line">$ as source.s -o source.o</span><br><span class="line">$ ld source.o -o <span class="built_in">exec</span> more-config-flag-go-here</span><br></pre></td></tr></table></figure><p>Note the <code>more-config-flag-go-here</code> mean that if we manual linking object file, we must specific some input params to make sure that we pointed to needed libs.</p><p>We can using <code>gcc</code> command with <code>--save-temps</code> param to get the result of 3 steps above.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc --save-temps -o <span class="built_in">exec</span> source.c</span><br></pre></td></tr></table></figure><h2 id="compile-c-source-file-with-exeternal-libs">Compile C source file with exeternal libs</h2><p>As above, we can compile the C program as usually till <code>step 4</code>. We must link the external libs to C source compiled o-code file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -c source.c -o source.o</span><br><span class="line">$ gcc -o <span class="built_in">exec</span> source.o -L. -l_mylib</span><br></pre></td></tr></table></figure><p>with - <code>-L.</code> mean the dir which have static compiled libs (in this case it <code>./</code>) - <code>-l_mylib</code> mean the needed lib's name is <code>lib_mylib.a</code> as the above convention.</p><p>Note: after the command create <code>.o</code> file be completed, we don't need header files any more, all are compiled and compressed into <code>.o</code> file. So in this opinion, the header file just like <code>interface</code> in oop language, we declare what we need, implementation will be written in another source file and compiled to libs, we linking it to main <code>.o</code> file and build executable file later.</p><p>So if we are going to use an external lib, we just download header files, include it into source code. In compile time, we download binary file of libs, and give it to <code>gcc</code> to link libs in linking step.</p><p>The above is the way we make an compiled executable file with static libs, the executable itself can run, no need any other libs link to it in run time. We also have the way to make this with dynamic libs (mean that in runtime, the exec file call some external libs to get implementation of needed funtions). Both of strategies have advantages and disadvantages points, so just think about it before compile your program.</p><p>Source code sample go <a href="https://github.com/khanhtc1202/c-advance/tree/master/tricks/libs-build" target="_blank" rel="noopener">here</a>.</p><p>Reference to:</p><ul><li><p>https://kipalog.com/posts/Thu-thuc-hien-4-Stage-khi-Compile-C-bang-GCC</p></li><li><p>https://www.geeksforgeeks.org/static-vs-dynamic-libraries/</p></li><li><p>https://www.geeksforgeeks.org/working-with-shared-libraries-set-1/</p></li><li><p>https://www.geeksforgeeks.org/working-with-shared-libraries-set-2/</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After hard coding your program hour by hour (sometime, it becomes year by year :) ), one of the most uncomfortable time is compiling it into executable file. As usually, we are going to compile a program by the hardest way to do it, just because it will make us knows that in some case, &lt;code&gt;gcc&lt;/code&gt; is really a hero :))&lt;/p&gt;
&lt;p&gt;The post&#39;s content is about compiling a C program by manual way. In that program, we use an external lib, defined by yourself.&lt;/p&gt;
    
    </summary>
    
    
      <category term="compiler" scheme="https://fromnoobstogeeks.com/tags/compiler/"/>
    
      <category term="manual" scheme="https://fromnoobstogeeks.com/tags/manual/"/>
    
      <category term="C/C++" scheme="https://fromnoobstogeeks.com/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>Memory trick</title>
    <link href="https://fromnoobstogeeks.com/2017/12/22/mem-trick/"/>
    <id>https://fromnoobstogeeks.com/2017/12/22/mem-trick/</id>
    <published>2017-12-22T18:42:41.000Z</published>
    <updated>2019-07-01T05:10:34.258Z</updated>
    
    <content type="html"><![CDATA[<p>Nếu đã từng có thời gian làm việc với C (hay ông nào kinh hơn làm hẳn với Assembly :) ) chắc ai cũng nhớ sự kinh hoàng của <strong>core dump fail</strong> :'( . Dù có sử dụng <a href="https://en.wikipedia.org/wiki/GNU_Debugger" target="_blank" rel="noopener"><code>gdb</code></a> debug thì chắc cũng phải bỏ ra cả mớ thời gian và công sức mà nhiều khi lỗi bắt nguồn từ những cái vớ vẩn nào đó mà bình thường ta không để ý :'( . Mặt khác bạn nên thấy may mắn khi ít ra còn biết chương trình đã lỗi ở đâu đó để mà sửa, có những lỗi nằm ở nhưng nơi hiểm hơn - không làm cho chương trình dừng nhưng kết quả thì sai lè. Một trong số những nguyên nhân chính dẫn đến nó là vấn đề <a href="https://en.wikipedia.org/wiki/Overflow" target="_blank" rel="noopener"><code>tràn số</code></a></p><a id="more"></a><p>Hôm nay trong khi đang mò code hệ thống, mình vớ được 1 đoạn đại ý như sau.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Same as (l+r)/2, but avoids overflow for</span></span><br><span class="line"><span class="comment">// large l and h</span></span><br><span class="line"><span class="keyword">int</span> m = l+(r-l)/<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>Không còn gì để nói thêm ngoài tuyệt vời :joy:</p><p>Đoạn code trên làm nhiệm vụ tính <strong>trung bình cộng của 2 số l và r</strong> với giả thiết đầu vào là <strong>l nhỏ hơn hoặc bằng r</strong></p><p>Thông thường khi nghĩ đến tính trung bình cộng, bạn cho rằng đơn giản chỉ cần <strong>cộng chúng lại và chia cho số số hạng</strong> nhưng chính phần đơn giản đó khiến cho chúng ta nhiều lúc <a href="https://i.ytimg.com/vi/Uvw0xNSj0H0/maxresdefault.jpg" target="_blank" rel="noopener"><code>mất ngủ đến mấy ngày :)</code></a> (cái này gợi nhớ đến dấu <code>;</code> thần thánh hoặc <code>}</code> mà chắc ai cũng đã dính rồi :joy: ).</p><p>Bạn cũng có thể dễ dàng dính tràn số với những đoạn code kiểu này - mà mình nghĩ chắc cũng không ít người vẫn làm thế :)) bao gồm cả người đang viết bài này :'(</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    sum += <span class="built_in">array</span>[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Việc thực hiện phép cộng bừa bãi nhiều khi thực sự gây ra những hậu quả bất ngờ khi đem chạy thuật toán với các test case lớn (ai chơi codejam chắc biết rõ vụ này).</p><p>Đoạn code mình vớ được hôm nay đem đến 1 ý tưởng không mới (chắc ai cũng biết nhưng chẳng mấy để ý) về vụ tránh lỗi tràn số nói trên.</p><p><span class="math display">\[\begin{equation}\dfrac{l + r}{2}= \dfrac{2l + r - l}{2}= \dfrac{l + (r - l)}{2}\end{equation}\]</span></p><p>Một biến đổi khá đơn giản nhưng đã tránh hoàn toàn được vấn đề <strong>overflow</strong> nói trên. Chú ý rằng với giả thiết đầu vào là <strong>l nhỏ hơn bằng r</strong> ta luôn có <strong>(r - l)</strong> nằm trong range cho phép của kiểu mẫu, đơn giản là vì bạn đã <strong>load được r vào bộ nhớ thì chẳng có lý do gì không load được (r - l) &lt; r vào đó cả</strong> :).</p><p>Tổng quát lên một chút ta có với giả thiết <span class="math inline">\(X_{1} &lt; X_{2} &lt; ... &lt; X_{n}\)</span> cùng phía so với 0</p><p><span class="math display">\[\begin{equation}\begin{aligned}\dfrac{X_{1} + X_{2} + ... + X_{n}}{n} &amp;= \dfrac{nX_{1} + (X_{2} - X_{1}) + ... + (X_{n} - X_{1})}{n} \\&amp;= X_{1} + \dfrac{(X_{2} - X_{1}) + ... + (X_{n} - X_{1})}{n} \\&amp;= X_{1} + \sum_{k=2}^n{\dfrac{X_{k} - X_{1}}{n}}\end{aligned}\end{equation}\]</span></p><p>Và với cách này thì bạn có thể thoải mái và yên tâm là không có chuyện tràn số nữa dù test dataset có lớn lên hay không :)).</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nếu đã từng có thời gian làm việc với C (hay ông nào kinh hơn làm hẳn với Assembly :) ) chắc ai cũng nhớ sự kinh hoàng của &lt;strong&gt;core dump fail&lt;/strong&gt; :&#39;( . Dù có sử dụng &lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Debugger&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;gdb&lt;/code&gt;&lt;/a&gt; debug thì chắc cũng phải bỏ ra cả mớ thời gian và công sức mà nhiều khi lỗi bắt nguồn từ những cái vớ vẩn nào đó mà bình thường ta không để ý :&#39;( . Mặt khác bạn nên thấy may mắn khi ít ra còn biết chương trình đã lỗi ở đâu đó để mà sửa, có những lỗi nằm ở nhưng nơi hiểm hơn - không làm cho chương trình dừng nhưng kết quả thì sai lè. Một trong số những nguyên nhân chính dẫn đến nó là vấn đề &lt;a href=&quot;https://en.wikipedia.org/wiki/Overflow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;tràn số&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="trick" scheme="https://fromnoobstogeeks.com/tags/trick/"/>
    
      <category term="os" scheme="https://fromnoobstogeeks.com/tags/os/"/>
    
      <category term="memory" scheme="https://fromnoobstogeeks.com/tags/memory/"/>
    
  </entry>
  
</feed>
